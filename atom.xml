<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WEB Development Department 共享平台</title>
  <subtitle>学习-分享-成长</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://npxawebshare.github.io/"/>
  <updated>2016-10-24T09:24:29.281Z</updated>
  <id>http://npxawebshare.github.io/</id>
  
  <author>
    <name>np-xa-web</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>GET请求304缓存问题梳理</title>
    <link href="http://npxawebshare.github.io/2016/10/24/deal-cache-304-to-200/"/>
    <id>http://npxawebshare.github.io/2016/10/24/deal-cache-304-to-200/</id>
    <published>2016-10-24T09:14:59.000Z</published>
    <updated>2016-10-24T09:24:29.281Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>@author: 段毅</p>
</blockquote>
<p> <img src="http://static.zybuluo.com/melunar/8qexwkeyfagxpnwjd0tdqmng/image_1avqvacnprasqoh1hb3hjb5m9.png" alt="angularJs"><br>Angular中给get方法的请求头中添加如图三个参数，可解决在IE下get请求总是从缓存里取而没有真正发送到服务端的问题。跟踪请求会发现从之前的304变为200，请求重新发送成功。<br>参考链接：<a href="http://stackoverflow.com/questions/16098430/angular-ie-caching-issue-for-http#" target="_blank" rel="external">http://stackoverflow.com/questions/16098430/angular-ie-caching-issue-for-http#</a></p>
<p><img src="http://static.zybuluo.com/melunar/uy3t33qo9nqsztby8gpfeffh/image_1avqvbd5nqcn1a9a13s6vgu1330m.png" alt="ajax"><br>jQuery中可以尝试通过配置ajax参数来实现防止：</p>
<p>参考链接：<a href="http://www.oschina.net/question/263977_57725?fromerr=zLoLHkb9" target="_blank" rel="external">http://www.oschina.net/question/263977_57725?fromerr=zLoLHkb9</a></p>
<p>再加上一句设置：<code>$.ajaxSetup({cache: false});</code></p>
<p>参考链接：<a href="http://www.cnblogs.com/artech/archive/2013/01/03/cache-4-ie.html" target="_blank" rel="external">http://www.cnblogs.com/artech/archive/2013/01/03/cache-4-ie.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;@author: 段毅&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; &lt;img src=&quot;http://static.zybuluo.com/melunar/8qexwkeyfagxpnwjd0tdqmng/image_1avqvacnprasqoh
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://npxawebshare.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>ES5新特性ing</title>
    <link href="http://npxawebshare.github.io/2016/09/22/ES5-new-about/"/>
    <id>http://npxawebshare.github.io/2016/09/22/ES5-new-about/</id>
    <published>2016-09-22T10:09:55.000Z</published>
    <updated>2016-09-22T10:11:37.340Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数组迭代-amp-字符串-amp-json"><a href="#数组迭代-amp-字符串-amp-json" class="headerlink" title="数组迭代 &amp; 字符串 &amp; json"></a>数组迭代 &amp; 字符串 &amp; json</h2><h3 id="数组的新方法"><a href="#数组的新方法" class="headerlink" title="数组的新方法"></a>数组的新方法</h3><p><code>forEach、map、filter、some、every、indexOf, lastIndexOf</code><br><code>reduce(function(previous,current,currentIndex,array)),</code> <code>reduceRight，isArray(obj)</code>等</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">res = [<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>].filter(<span class="function"><span class="keyword">function</span>(<span class="params">i,val</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (val&gt;<span class="number">3</span>)；</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>];</span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, array</span>) </span>&#123;</span><br><span class="line">    alert(value+<span class="string">"-"</span>+index);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>];</span><br><span class="line">arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, array</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">if</span>(value&gt;<span class="number">3</span>)&#123;alert(value+<span class="string">"-"</span>+index);&#125;</span><br><span class="line">     </span><br><span class="line">&#125;);</span><br><span class="line"><span class="string">``</span><span class="string">` </span><br><span class="line">`</span><span class="string">``</span> javaScript</span><br><span class="line"><span class="keyword">var</span> arr=[<span class="number">0</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> res=arr.some(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> value&gt;<span class="number">3</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">0</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> res=arr.every(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> value&gt;<span class="number">3</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<ul>
<li>forEach和map是遍历的处理；</li>
<li>filter是遍历处理加返回值布尔类型判断，会返回项true新数组；</li>
<li>some和every是逻辑判断方法，根据返回值设定，返回布尔值结果。</li>
</ul>
<h3 id="String-新方法"><a href="#String-新方法" class="headerlink" title="String 新方法"></a>String 新方法</h3><ul>
<li>String.prototype.charAt(index)  返回index处的字符   </li>
<li>Strng.prototype.charCodeAt(index) 返回index处的字符的Unicode编码</li>
<li>String.prototype.trim() 返回一个去掉开头和结尾的字符串拷贝</li>
</ul>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul>
<li>添加了原生json对象</li>
<li>Date对象 添加了Date.now() 直接获取时间戳、Date.prototype.toJSON()等方法</li>
<li>在ES5中的关键字和保留字中，新增了let和yield <blockquote>
<p>let，其实就是块级作用域申明变量的var。之前JS的var关键字是非块级作用域的，而是函数级的。<br>  yield是一个增强版的return，可以忽略集合中不要的项，生成更小的子项；或者更改原始集合项的结构，增加项的深度。创建用于遍历有限序列集合的迭代器<br>return则是返回每一个项，如果不明确指明，这个项会被设置为undefined。<br>所以，yield函数里边是不能写return的，解释器不会去解释</p>
</blockquote>
</li>
</ul>
<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p><strong>对象新属性：getter setter value writable enumrable configrable</strong></p>
<h3 id="defineProperty-obj-“obj-pro”-settings"><a href="#defineProperty-obj-“obj-pro”-settings" class="headerlink" title="defineProperty(obj, “obj.pro”, {settings})"></a>defineProperty(obj, “obj.pro”, {settings})</h3><p>obj 必需。 要在其上添加或修改属性的对象。 这可能是一个本机   JavaScript对象（即用户定义的对象或内置对象）或 DOM 对象。<br>obj.pro 必需。 一个包含属性名称的字符串。<br>{settings}必需。 属性描述符。 它可以针对数据属性或访问器属性  </p>
<ol>
<li><p>对一个对象的属性设置 getter setter:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">"name"</span>, &#123;</span><br><span class="line">  get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name.toUpperCase();</span><br><span class="line">    &#125;,</span><br><span class="line">  set: <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    name=n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>定义一个对象的属性是否可以修改、是否可以删除、是否可以添加:</p>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty( obj, <span class="string">"value"</span>, &#123;</span><br><span class="line">    value: <span class="literal">true</span>,</span><br><span class="line">    writable: <span class="literal">false</span>,</span><br><span class="line">    enumerable: <span class="literal">true</span>,</span><br><span class="line">    configurable: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>获取对象的一个属性的四个基本属性（常规定义对象 属性默认值为true，使用defineProperty定义默认为false）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Obj = &#123;<span class="string">"Pro"</span>: <span class="string">""</span>&#125;</span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(Obj, <span class="string">'Pro'</span>); </span><br><span class="line"><span class="comment">//Object &#123;value: "", writable: true, enumerable: true, configurable: true&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> otherOne = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(otherOne, <span class="string">"name"</span>, &#123;</span><br><span class="line">    value:<span class="string">"coverguo"</span></span><br><span class="line">&#125;); </span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(otherOne, <span class="string">'name'</span>)</span><br><span class="line"><span class="comment">//Object &#123;value: "coverguo", writable: false, enumerable: false, configurable: false&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="冻结一个对象"><a href="#冻结一个对象" class="headerlink" title="冻结一个对象"></a>冻结一个对象</h3><p>冻结分两种：</p>
<ol>
<li><p><strong>Object.seal(obj)</strong><br>使对象的属性配置配置无法修改，等价于给每一个属性都设置成 configurale=false</p>
</li>
<li><p><strong>Object.freeze(obj)</strong><br>除了 seal 之外，它还会是属性值本身无法被修改，相当于对每个属性同时进行了 configurable=false 和 writable=false</p>
</li>
</ol>
<h3 id="遍历对象的属性"><a href="#遍历对象的属性" class="headerlink" title="遍历对象的属性"></a>遍历对象的属性</h3><p>Object.getOwnPropertyNames<br>Object.keys</p>
<h3 id="Object-create-proto-propertiesObject"><a href="#Object-create-proto-propertiesObject" class="headerlink" title="Object.create(proto [, propertiesObject ])"></a>Object.create(proto [, propertiesObject ])</h3><p>新的对象创建方式，第一个参数是要继承的原型，如果不是一个子函数，可以传一个null，第二个参数是对象的属性描述符，这个参数是可选<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="built_in">Object</span>.create(<span class="built_in">Object</span>.prototype,&#123;</span><br><span class="line">   name: &#123;</span><br><span class="line">     : <span class="string">"demo"</span>,</span><br><span class="line">     enumerable: <span class="literal">false</span>,</span><br><span class="line">     configurable: <span class="literal">false</span>,</span><br><span class="line">     writable: <span class="literal">false</span> <span class="comment">//设置属性值是否能被修改，二次赋值</span></span><br><span class="line">   &#125;</span><br><span class="line">   &#125;);</span><br><span class="line">alert(obj.name);</span><br><span class="line">obj.name=<span class="string">"123"</span>;</span><br><span class="line">alert(obj.name);</span><br></pre></td></tr></table></figure></p>
<p>一个对象的基本属性<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">name: &#123;</span><br><span class="line">     value: <span class="string">"demo"</span>, <span class="comment">//属性值 默认为undefined 访问name，直接写name即可不必 name.value</span></span><br><span class="line">     enumerable: <span class="literal">false</span>, <span class="comment">//是否能枚举对象属性( 是否能在for-in循环中遍历出来或在Object.keys中列举出来)</span></span><br><span class="line">     configurable: <span class="literal">false</span>,<span class="comment">// 是否能再次配置这些属性（删除目标属性或修改属性writable, configurable, enumerable，而且在严格模式下，属性值为false的进行删除赋值操作会报错）</span></span><br><span class="line">     writable: <span class="literal">true</span> <span class="comment">//属性值是否可修改</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="built_in">Object</span>.create(<span class="built_in">Object</span>.prototype,&#123;</span><br><span class="line">   name: &#123;</span><br><span class="line">     value: <span class="string">"demo"</span>,</span><br><span class="line">     enumerable: <span class="literal">false</span>,</span><br><span class="line">     configurable: <span class="literal">false</span>,</span><br><span class="line">     writable: <span class="literal">true</span></span><br><span class="line">   &#125;,</span><br><span class="line">   sex:&#123;</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(<span class="keyword">this</span>.name==<span class="string">"demo"</span>)&#123;</span><br><span class="line">      alert(<span class="string">"yes"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    alert(<span class="string">"no"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line"> &#125;</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure>
<p>在访问sex属性会调用sex属性定义的get方法，在里面加入合适的逻辑既可<br>obj.sex;//alert “yes”</p>
<h3 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.create(prototype,descriptors) <span class="comment">//以指定的原型创建对象，并且可以（可选）的设置对象的属性</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(object, propertyname, descriptor)  <span class="comment">//对指定的对象的一个属性设置丰富的值控制</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperties(object, descriptors)  <span class="comment">//对指定的对象的一组属性提供丰富的值控制</span></span><br><span class="line">APIObject.getOwnPropertyDescriptor(object, propertyname)  <span class="comment">//返回属性的定义</span></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyNames(object)  <span class="comment">//返回所有属性的名称，哪怕说是不能枚举的属性</span></span><br><span class="line"><span class="built_in">Object</span>.preventExtensions(object)  <span class="comment">//防止新的属性添加到对象</span></span><br><span class="line"><span class="built_in">Object</span>.isExtensible(object)  <span class="comment">//是否可添加属性到对象</span></span><br><span class="line"><span class="built_in">Object</span>.seal(object) <span class="comment">//不能添加和删除属性</span></span><br><span class="line"><span class="built_in">Object</span>.isSealed(object)</span><br><span class="line"><span class="built_in">Object</span>.freeze(object)  <span class="comment">//防止现有属性和属性值的修改，并防止新特性的添加。</span></span><br><span class="line"><span class="built_in">Object</span>.isFrozen(object)  <span class="comment">//最后如果想要得到对象原型，可以用</span></span><br><span class="line"><span class="built_in">Object</span>.getPrototypeOf(object)</span><br></pre></td></tr></table></figure>
<h2 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h2><blockquote>
<p>在代码首部加入字符串  “use strict”。有两种应用场景，一种是全局模式，一种是局部模式。</p>
</blockquote>
<ol>
<li>不使用var声明变量严格模式中将不通过</li>
<li>任何使用’eval’的操作都会被禁止<blockquote>
<p>使用eval函数，声明名称为eval的变量，函数等</p>
</blockquote>
</li>
<li><p>eval作用域</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line"><span class="built_in">eval</span>(<span class="string">'var a = 20; console.log(a)'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>eval作用域：控制台依次输出了20，10。eval是在全局模式下（非函数内）的；</p>
<p>如果不加严格模式，此时修改的是全局的a。即输出20，20。</p>
</blockquote>
</li>
<li><p>with被禁用</p>
</li>
<li>caller/callee 被禁用</li>
<li>对禁止扩展的对象添加新属性会报错</li>
<li>删除系统内置的属性会报错</li>
<li>delete使用var声明的变量或挂在window上的变量报错</li>
<li>delete不可删除属性(isSealed或isFrozen)的对象时报错</li>
<li>对一个对象的只读属性进行赋值将报错</li>
<li>对象有重名的属性将报错</li>
<li>函数有重名的参数将报错</li>
<li>八进制表示法被禁用（？？？）</li>
<li>arguments严格定义为参数，不再与形参绑定<blockquote>
<p>不能用过argument[index]修改参数</p>
</blockquote>
</li>
<li>函数必须声明在顶层</li>
<li>ES5里新增的关键字不能当做变量标示符使用，如implements, interface, let, package, private, protected, public, static, yield</li>
<li>call/apply的第一个参数直接传入不包装为对象</li>
<li>call/apply的第一个参数为null/undefined时，this为null/undefined<blockquote>
<p>而在非严格模式中输出的都是window（或global）。</p>
</blockquote>
</li>
<li>bind的第一个参数为null/undefined时，this为null/undefined<blockquote>
<p>而在非严格模式中输出的都是window（或global）。<br><a href="http://www.cnblogs.com/snandy/p/3428171.html" target="_blank" rel="external">http://www.cnblogs.com/snandy/p/3428171.html</a></p>
</blockquote>
</li>
</ol>
<p>=============================underline=================<br><a href="http://www.w2bc.com/article/108094" target="_blank" rel="external">http://www.w2bc.com/article/108094</a><br>=============================underline=================</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;数组迭代-amp-字符串-amp-json&quot;&gt;&lt;a href=&quot;#数组迭代-amp-字符串-amp-json&quot; class=&quot;headerlink&quot; title=&quot;数组迭代 &amp;amp; 字符串 &amp;amp; json&quot;&gt;&lt;/a&gt;数组迭代 &amp;amp; 字符串 &amp;amp
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://npxawebshare.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>css3 新特性ing</title>
    <link href="http://npxawebshare.github.io/2016/09/22/css3-new-about/"/>
    <id>http://npxawebshare.github.io/2016/09/22/css3-new-about/</id>
    <published>2016-09-22T10:06:20.000Z</published>
    <updated>2016-09-22T10:09:17.967Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS3-新特性"><a href="#CSS3-新特性" class="headerlink" title="CSS3 新特性"></a>CSS3 新特性</h1><p><a href="http://www.ibm.com/developerworks/cn/web/1202_zhouxiang_css3/" target="_blank" rel="external">http://www.ibm.com/developerworks/cn/web/1202_zhouxiang_css3/</a></p>
<blockquote>
<p>几行简单的 CSS 代码便可实现一系列令人眼前一亮的效果，比用 JavaScript 去模拟这样的效果要好得多，不仅降低了复杂度，变得易维护，在性能上也突飞猛进了</p>
</blockquote>
<h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><ol>
<li>定位到div下的第4个标签为span的元素。 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&gt;<span class="selector-class">.main</span> <span class="selector-tag">div</span> <span class="selector-tag">span</span><span class="selector-attr">[4]</span> &#123;</span><br><span class="line">    <span class="comment">/*props: values;*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li>定位到元素集的奇数或偶数索引 <code>tr:nth-child(odd||even)</code></li>
<li>非选择器 <code>:not(E)</code></li>
<li>第一个、最后一个子元素<code>E:first-child E:last-child</code></li>
<li><p>其他选择器</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">E</span>:nth-last-child(<span class="keyword">n</span>) </span><br><span class="line"><span class="keyword">E</span>:nth-of-<span class="keyword">type</span>(<span class="keyword">n</span>) </span><br><span class="line"><span class="keyword">E</span>:nth-last-of-<span class="keyword">type</span>(<span class="keyword">n</span>) </span><br><span class="line"><span class="keyword">E</span>:last-child </span><br><span class="line"><span class="keyword">E</span>:first-of-<span class="keyword">type</span> </span><br><span class="line"><span class="keyword">E</span>:only-child </span><br><span class="line"><span class="keyword">E</span>:only-of-<span class="keyword">type</span> </span><br><span class="line"><span class="keyword">E</span>:empty </span><br><span class="line"><span class="keyword">E</span>:checked </span><br><span class="line"><span class="keyword">E</span>:enabled </span><br><span class="line"><span class="keyword">E</span>:disabled </span><br><span class="line"><span class="keyword">E</span>::selection </span><br><span class="line"><span class="keyword">E</span>:not(s)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="文字特效"><a href="#文字特效" class="headerlink" title="文字特效"></a>文字特效</h2><h3 id="Font-face"><a href="#Font-face" class="headerlink" title="@Font-face"></a>@Font-face</h3> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="selector-tag">--</span>声明<span class="selector-tag">--</span>&gt;</span><br><span class="line">@<span class="keyword">font-face</span> &#123; </span><br><span class="line">    <span class="attribute">font-family</span>: newFont; </span><br><span class="line">    <span class="attribute">src</span>:<span class="built_in">url</span>(BORDERW0.eot); </span><br><span class="line">&#125; </span><br><span class="line">&lt;!<span class="selector-tag">--</span>引用<span class="selector-tag">--</span>&gt;</span><br><span class="line"><span class="selector-class">.border</span> &#123; </span><br><span class="line">     <span class="attribute">font-size</span>: <span class="number">35px</span>;</span><br><span class="line">     <span class="attribute">color</span>: black; </span><br><span class="line">     <span class="attribute">font-famlily</span>: <span class="string">"newFont"</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h3 id="word-wrap-amp-text-overflow-amp-文字效果"><a href="#word-wrap-amp-text-overflow-amp-文字效果" class="headerlink" title="word-wrap &amp; text-overflow &amp;  文字效果"></a>word-wrap &amp; text-overflow &amp;  文字效果</h3> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">   <span class="attribute">word-wrap</span>: break-word;</span><br><span class="line">   <span class="attribute">text-overflow</span>: clip || ellipsis;</span><br><span class="line">&#125;</span><br><span class="line">&lt;!<span class="selector-tag">--</span>文字效果<span class="selector-tag">--</span>&gt;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">   <span class="attribute">-webkit-text-fill-color</span>: black; </span><br><span class="line">   <span class="attribute">-webkit-text-stroke-color</span>: red; </span><br><span class="line">   <span class="attribute">-webkit-text-stroke-width</span>: <span class="number">2.75px</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
  <figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Text-<span class="built_in">fill</span>-<span class="built_in">color</span>: 文字内部填充颜色</span><br><span class="line">Text-<span class="built_in">stroke</span>-<span class="built_in">color</span>: 文字边界填充颜色</span><br><span class="line">Text-<span class="built_in">stroke</span>-<span class="built_in">width</span>: 文字边界宽度</span><br></pre></td></tr></table></figure>
<h2 id=""><a href="#" class="headerlink" title=" "></a> <img src="https://ooo.0o0.ooo/2016/09/21/57e234eea249a.png" alt="效果图"></h2><h2 id="-1"><a href="#-1" class="headerlink" title=" "></a> <img src="https://ooo.0o0.ooo/2016/09/21/57e234ad0940f.png" alt="效果图"></h2><p> <img src="https://ooo.0o0.ooo/2016/09/21/57e235f574269.png" alt="效果图"></p>
<h2 id="多列布局（multi-column-layout）"><a href="#多列布局（multi-column-layout）" class="headerlink" title="多列布局（multi-column layout）"></a>多列布局（multi-column layout）</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Column-count：2; //布局几列。</span><br><span class="line">Column-rule：1px #999 solid; //列与列之间的间隔条的样式</span><br><span class="line">Column-gap：4px; //列于列之间的间隔</span><br></pre></td></tr></table></figure>
<p><img src="https://ooo.0o0.ooo/2016/09/22/57e34b6632e85.png" alt="效果图"></p>
<h2 id="边框和颜色（color-border）"><a href="#边框和颜色（color-border）" class="headerlink" title="边框和颜色（color, border）"></a>边框和颜色（color, border）</h2><ol>
<li>颜色透明的属性值 <code>background-color: rgba(r,g,b,a)</code></li>
<li>HSL(色调，饱和度，亮度)的透明度 <code>color: hsla( length, percentage, percentage, a)</code></li>
<li>圆角 <code>border-radius: 15px\20px;</code> (方位和参数个数类似padding和margin)</li>
</ol>
<h2 id="渐变效果（Gradient）"><a href="#渐变效果（Gradient）" class="headerlink" title="渐变效果（Gradient）"></a>渐变效果（Gradient）</h2><ol>
<li>线性渐变</li>
</ol>
<blockquote>
<p><code>gradient(linear,0% 0%,100% 0%,from(#2A8BBE),
    [color-stop(0.33,green),]to(#FE280E))</code><br>color-stop 相当于颜色拐点</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.linear-gradient</span> &#123;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">            <span class="attribute">background-image</span>:<span class="built_in">-webkit-gradient</span>(linear,0% 0%,100% 0%,from(white), <span class="built_in">color-stop</span>(0.33,green),<span class="built_in">to</span>(#FE0000));</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<center><img src="https://ooo.0o0.ooo/2016/09/22/57e34f0c5cc53.png" alt="V4L{65S39KB~)60TWWDWH`M.png"></center>

<ol>
<li>径向渐变（<strong>由外到内的渐变</strong>）<br>前三个数值是起始圆的圆心坐标和半径<br>后三个是结束色彩代表圆的圆心坐标和半径<br>color-stop(0.5,red)是断点的位置和色彩  </li>
</ol>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background-image</span>: <span class="selector-tag">-webkit-gradient</span>(<span class="selector-tag">radial</span>, 50 50, 50, 50 50, 0, <span class="selector-tag">from</span>(<span class="selector-tag">black</span>), <span class="selector-tag">color-stop</span>(0<span class="selector-class">.5</span>, <span class="selector-tag">red</span>), <span class="selector-tag">to</span>(<span class="selector-tag">blue</span>));</span><br></pre></td></tr></table></figure>
<center><img src="https://ooo.0o0.ooo/2016/09/22/57e3528b2188f.png" alt="效果图"></center>

<p><strong>漫射光效果</strong><br>改变坐标点位置即可实现<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">backgroud</span><span class="selector-pseudo">:-webkit-gradient(radial</span>,50 50,50,50 1,0,<span class="selector-tag">from</span>(<span class="selector-tag">black</span>),<span class="selector-tag">to</span>(<span class="selector-tag">white</span>));</span><br></pre></td></tr></table></figure></p>
<center><img src="https://ooo.0o0.ooo/2016/09/22/57e35332564b1.png" alt="效果图"></center>

<h2 id="阴影（Shadow）和反射（Reflect）"><a href="#阴影（Shadow）和反射（Reflect）" class="headerlink" title="阴影（Shadow）和反射（Reflect）"></a>阴影（Shadow）和反射（Reflect）</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.class1</span>&#123; </span><br><span class="line">    <span class="attribute">text-shadow</span>:<span class="number">5px</span> <span class="number">2px</span> <span class="number">6px</span> <span class="built_in">rgba</span>(64, 64, 64, 0.5); </span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-class">.class2</span>&#123; </span><br><span class="line">    <span class="attribute">box-shadow</span>:<span class="number">3px</span> <span class="number">3px</span> <span class="number">3px</span> <span class="built_in">rgba</span>(0, 64, 128, 0.3); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第一个参数：X轴方向阴影偏移量<br>第二个参数：Y轴方向阴影偏移量<br>第三个参数：阴影模糊半径<br>第四个参数：阴影颜色为<br>其中偏移量可以为负值，负值则反方向<br><img src="https://ooo.0o0.ooo/2016/09/21/57e239c9698fe.png" alt="效果图"><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.class3 &#123; </span><br><span class="line">    &lt;!--反射和渐变--&gt;</span><br><span class="line">    -webkit-box-reflect: below 10px </span><br><span class="line">    -webkit-gradient(linear, left top, left bottom, from(transparent),to(rgba(255, 255, 255, 0.51))); </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p>
<p><img src="https://ooo.0o0.ooo/2016/09/21/57e239c9e2021.png" alt="效果图"></p>
<h2 id="背景效果"><a href="#背景效果" class="headerlink" title="背景效果"></a>背景效果</h2><blockquote>
<p>  css2的五个与背景相关的属性。<br>    background-color:完全填充背景的颜色<br>    background-image:用作背景的图片<br>    background-position:确定背景图片的位置<br>    background-repeat:确定背景图片是否重复铺平<br>    background-attachment:确定背景图片是否随页面滚动  </p>
</blockquote>
<h3 id="“background-clip”-背景画区"><a href="#“background-clip”-背景画区" class="headerlink" title="“background-clip” 背景画区"></a>“background-clip” 背景画区</h3><ul>
<li>background-clip: border-box; 背景从 border 开始显示 ;</li>
<li>background-clip: padding-box; 背景从 padding 开始显示 ;</li>
<li>background-clip: content-box; 背景显 content 区域开始显示 ;</li>
<li>background-clip: no-clip; 默认属性，等同于 border-box;<br>通常情况，背景都是覆盖整个元素的,CSS3可以设置是否一定要这样做。这里可以设定背景颜色或图片的覆盖范围。</li>
</ul>
<h3 id="“background-position”-背景的位置，"><a href="#“background-position”-背景的位置，" class="headerlink" title="“background-position” 背景的位置，"></a>“background-position” 背景的位置，</h3><p>通常与 background-position 联合使用，您可以从 border、padding、content 来计算 background-position（就像 background-clip）。</p>
<ul>
<li>background-origin: border-box; 从 border. 开始计算 background-position;</li>
<li>background-origin: padding-box; 从 padding. 开始计算 background-position;</li>
<li>background-origin: content-box; 从 content. 开始计算 background-position;</li>
</ul>
<h3 id="“background-size”-背景图片的大小"><a href="#“background-size”-背景图片的大小" class="headerlink" title="“background-size” 背景图片的大小"></a>“background-size” 背景图片的大小</h3><p>注意别和 clip 弄混，这个主要用于设定<strong>图片本身</strong> </p>
<ul>
<li>background-size: contain; 缩小图片以适合元素（维持像素长宽比）</li>
<li>background-size: cover; 扩展元素以填补元素（维持像素长宽比）</li>
<li>background-size: 100px 100px; 缩小图片至指定的大小 .</li>
<li>background-size: 50% 100%; 缩小图片至指定的大小，百分比是相对包含元素的尺寸 .</li>
</ul>
<h3 id="“background-break”"><a href="#“background-break”" class="headerlink" title="“background-break”"></a>“background-break”</h3><p>元素可以被分成几个独立的盒子（如使内联元素 span 跨越多行），background-break 属性用来控制背景怎样在这些不同的盒子中显示。</p>
<ul>
<li>background-break: continuous; 默认值。忽略盒之间的距离（也就是像元    素没有分成多个盒子，依然是一个整体一样）</li>
<li>background-break: bounding-box; 把盒之间的距离计算在内；</li>
<li>background-break: each-box; 为每个盒子单独重绘背景。<br>这种属性可以设定复杂元素的背景属性。</li>
</ul>
<p><em>效果图待确认</em></p>
<center><br><img src="https://ooo.0o0.ooo/2016/09/22/57e373f7932a9.png" alt="效果图"><br></center>

<center><br><img src="https://ooo.0o0.ooo/2016/09/22/57e374cd4ccc2.png" alt="效果图"><br></center>

<h3 id="多背景图片"><a href="#多背景图片" class="headerlink" title="多背景图片"></a>多背景图片</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.bg &#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    background: url(&quot;image/close-hover.png&quot;) 10px 50px no-repeat, url(&quot;image/close.png&quot;) 50px 50px no-repeat;</span><br><span class="line">    background-color: rgba(100,100,100,.1);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
 <center><img src="https://ooo.0o0.ooo/2016/09/22/57e36c61c8eab.png" alt="效果图"></center>

<h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><blockquote>
<p>目前只有 webkit 内核的新版本 safari 和 chrome 以及 gecko 内核的新版本 firefox.</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CSS3-新特性&quot;&gt;&lt;a href=&quot;#CSS3-新特性&quot; class=&quot;headerlink&quot; title=&quot;CSS3 新特性&quot;&gt;&lt;/a&gt;CSS3 新特性&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://www.ibm.com/developerworks/cn/
    
    </summary>
    
    
      <category term="css" scheme="http://npxawebshare.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>less 学习笔记</title>
    <link href="http://npxawebshare.github.io/2016/09/22/less-about/"/>
    <id>http://npxawebshare.github.io/2016/09/22/less-about/</id>
    <published>2016-09-22T10:04:24.000Z</published>
    <updated>2016-09-22T10:05:21.558Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Less 是一门 CSS 预处理语言，它扩展了 CSS 语言，增加了变量、Mixin、函数等特性，使 CSS 更易维护和扩展。</p>
</blockquote>
<p>Less 可以运行在 Node 或浏览器端。</p>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="服务（node）端"><a href="#服务（node）端" class="headerlink" title="服务（node）端"></a>服务（node）端</h3><ol>
<li>安装 <code>$ npm install -g less</code></li>
<li>编译less文件 <code>$ lessc styles.less</code></li>
<li>定向编译到指定css文件 <code>$ lessc styles.less styles.css</code><br><img src="https://ooo.0o0.ooo/2016/09/21/57e24d0e8c216.png" alt="L`RK2IZJ(~QL}UX(GX92J7X.png"></li>
</ol>
<h3 id="浏览器端"><a href="#浏览器端" class="headerlink" title="浏览器端"></a>浏览器端</h3><ol>
<li>下载 <code>less.js</code> <a href="https://raw.github.com/less/less.js/v2.5.3/dist/less.min.js" target="_blank" rel="external">链接:《less-v2.5.3.min.js》</a></li>
<li>创建less文件 <code>styles.less</code></li>
<li>在html文件head中引用less文件<br><code>&lt;link rel=&quot;stylesheet/less&quot; type=&quot;text/css&quot; href=&quot;styles.less&quot; /&gt;</code></li>
<li>还需要引入转译less的js文件<br><code>&lt;script src=&quot;less.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</code></li>
<li>或者使用CDN <code>&lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/less.js/2.5.3/less.min.js&quot;&gt;&lt;/script&gt;</code><br><code>//cdn.bootcss.com/less.js/3.0.0-pre.3/less.min.js</code><br><code>&lt;script src=&quot;//cdn.bootcss.com/less.js/3.0.0-pre.3/less.min.js&quot;&gt;&lt;/script&gt;</code></li>
<li>注意：<strong>less文件的引入位置必须在less.js的引入位置之前</strong>，<em>不然less.js还不方便异步加载</em></li>
</ol>
<h2 id="Less-语法"><a href="#Less-语法" class="headerlink" title="Less 语法"></a>Less 语法</h2><blockquote>
<p>Less 的语法特性跟Sass大同小异，参考官方文档，了解基本特性即可，大概也就是变量、注释、导入、作用域、混入、函数、继承的一些知识，参考 <a href="http://www.ibm.com/developerworks/cn/web/1207_zhaoch_lesscss/" target="_blank" rel="external">http://www.ibm.com/developerworks/cn/web/1207_zhaoch_lesscss/</a></p>
<p>两者都属于 CSS 预处理器，功能上大同小异，都是使用类似程序式语言的方式书写 CSS, 都具有变量、混入、嵌套、继承等特性，最终目的都是方便 CSS 的书写及维护。<br>LESS 和 SASS 互相促进互相影响，相比之下 LESS 更接近 CSS 语法</p>
<p>官网 <a href="http://www.bootcss.com/p/lesscss/" target="_blank" rel="external">http://www.bootcss.com/p/lesscss/</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Less 是一门 CSS 预处理语言，它扩展了 CSS 语言，增加了变量、Mixin、函数等特性，使 CSS 更易维护和扩展。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Less 可以运行在 Node 或浏览器端。&lt;/p&gt;
&lt;h2 id=&quot;使用方法
    
    </summary>
    
    
      <category term="css" scheme="http://npxawebshare.github.io/tags/css/"/>
    
      <category term="less" scheme="http://npxawebshare.github.io/tags/less/"/>
    
  </entry>
  
  <entry>
    <title>Sass 学习笔记</title>
    <link href="http://npxawebshare.github.io/2016/09/22/sass-about/"/>
    <id>http://npxawebshare.github.io/2016/09/22/sass-about/</id>
    <published>2016-09-22T08:43:48.000Z</published>
    <updated>2016-09-22T09:49:19.207Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><a href="http://www.w3cplus.com/sassguide/" target="_blank" rel="external">http://www.w3cplus.com/sassguide/</a></p>
</blockquote>
<h2 id="基本特性"><a href="#基本特性" class="headerlink" title="基本特性"></a>基本特性</h2><ul>
<li>sass中可以定义变量，方便统一修改和维护</li>
<li>sass可以进行选择器的嵌套，表示层级关系</li>
<li>sass中如<strong>导入</strong>其他sass文件(<em>可以使用导入文件的变量</em>)，最后编译为一个css文件，优于纯css的@import</li>
<li><p>sass中可用mixin定义一些代码片段，且可传参数，方便日后根据需求调用 </p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--处理css3的前缀兼容轻松便捷 @<span class="keyword">mixin</span>语法后面有介绍（ctrl + F）--&gt;</span><br><span class="line">@<span class="keyword">mixin</span> box-sizing (<span class="variable">$sizing</span>) &#123;</span><br><span class="line">    -webkit-<span class="attribute">box-sizing</span>:<span class="variable">$sizing</span>;</span><br><span class="line">    -moz-<span class="attribute">box-sizing</span>:<span class="variable">$sizing</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>:<span class="variable">$sizing</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box-border</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">@<span class="keyword">include</span> box-sizing(border-box);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>sass可通过@extend来实现代码组合声明，使代码更加优越简洁</p>
</li>
<li>进行简单的加减乘除运算等</li>
<li>集成了大量的颜色函数</li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol>
<li>首先安装依赖环境ruby</li>
<li>打开ruby的cmd，执行 <code>gem install sass</code>命令安装sass</li>
<li>命令 <code>sass style.scss style.css</code>转译sass为css文件<br><em>转译比较蛋疼，需要以管理员身份打开cmd或者打开ruby的cmd doss窗口，否则系统不识别sass命令(难道需要重启？待确认)</em></li>
<li>单文件监听 <code>sass --watch style.scss:style.css</code></li>
<li>文件夹监听命令 <code>sass --watch sassFileDirectory:cssFileDirectory</code></li>
</ol>
<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ul>
<li><a href="http://www.sassmeister.com/" target="_blank" rel="external">官方在线转换器</a></li>
<li>koala.exe <a href="https://www.baidu.com/link?url=0WcCMWG49AbiGVVWeFMUBRn2ej3G2T6xMAuGfgfbS3Bno2Vx3CIWv89odtv64qqJe0rMH2LMt_ElHv_HXM6nia&amp;wd=&amp;eqid=a1e9f90d00002b730000000257e37cac" target="_blank" rel="external">下载</a></li>
<li>sass监听</li>
<li>webstorm配置监听（设置-工具-文件监听器-添加sass或scss监听 注意修改Programe配置项）<br><img src="https://ooo.0o0.ooo/2016/09/22/57e37bb9e7539.png" alt="图片"></li>
</ul>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>参考文档：<a href="http://www.w3cplus.com/sassguide/syntax.html" target="_blank" rel="external">http://www.w3cplus.com/sassguide/syntax.html</a></p>
<ol>
<li>文件后缀名： sass（不适用大号和分号的语法，不推荐使用）和scss（类似css的语法，推荐）</li>
<li>导入@import “ScssFileNameWithoutSuffix”: 编译时会将@import的scss文件合并进来只生成一个CSS文件，可以使用引用文件中定义的变量（<em>把变量定义在一个文件，作为公共文件导入</em>），可以减少浏览器http请求！</li>
<li>注释：终于支持<code>//</code>注释了，可恶的css只支持<code>/*...*/</code></li>
<li>变量</li>
</ol>
<ul>
<li>一般变量 <code>$varName: value;</code>（可以全局使用）</li>
<li>默认变量  <code>$varName: value  !default;</code>（根据需求来覆盖：重新声明即可）</li>
<li><p>特殊变量 如果变量作为属性或在某些特殊情况下等则必须要以#{$variables}形式使用</p>
   <figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="variable">$borderDirection</span>: top !default;</span><br><span class="line"><span class="selector-class">.border-</span>#&#123;<span class="variable">$borderDirection</span>&#125; &#123;</span><br><span class="line">    <span class="attribute">border</span>-#&#123;<span class="variable">$borderDirection</span>&#125;:<span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>全局变量 在变量值后面加上!global即为全局变量。(这个目前还用不上,等待新版本的sass设计好全局变量和局部变量的问题)</p>
</li>
<li><p>多值变量 list <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html" target="_blank" rel="external">map</a> (看例子)</p>
  <figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="variable">$linkColor</span>: <span class="number">#08c</span> <span class="number">#333</span> !default; <span class="comment">//第一个值为默认值，第二个鼠标滑过值</span></span><br><span class="line">				       <span class="selector-tag">a</span> &#123;</span><br><span class="line">					   <span class="attribute">color</span>:nth(<span class="variable">$linkColor</span>,<span class="number">1</span>);</span><br><span class="line">&amp;:hover&#123;</span><br><span class="line">     <span class="attribute">color</span>:nth(<span class="variable">$linkColor</span>,<span class="number">2</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ol>
<li>嵌套(Nesting)</li>
</ol>
<ul>
<li>选择器嵌套：在一个选择器中嵌套另一个选择器来实现继承</li>
<li><p>属性嵌套：属性拥有同一个开始单词…可以这么写</p>
  <figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">    <span class="selector-class">.fakeshadow</span> &#123;</span><br><span class="line"><span class="attribute">border</span>: &#123;</span><br><span class="line">    style: solid;</span><br><span class="line"><span class="attribute">left</span>: &#123;</span><br><span class="line">    width: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#888</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">right</span>: &#123;</span><br><span class="line">    width: <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>@at-root sass3.3.0中新增的功能，跳出所有的被嵌套选择器</p>
</li>
<li>@keyframes @media 等…</li>
</ul>
<ol>
<li><p>混合(mixin): 使用@mixin声明混合，可以传递参数，参数名以$符号开始，多个参数以<strong>逗号</strong>分开(<strong>注意</strong>不用逗号的可能是一个list参数)，也可以给参数设置默认值。声明的@mixin通过@include来调用</p>
 <figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--sass <span class="selector-tag">style</span>--&gt;</span><br><span class="line">@<span class="keyword">mixin</span> horizontal-line(<span class="variable">$border</span>:<span class="number">1px</span> dashed <span class="number">#ccc</span>, <span class="variable">$padding</span>:<span class="number">10px</span>)&#123;</span><br><span class="line">    <span class="attribute">border-bottom</span>:<span class="variable">$border</span>;</span><br><span class="line">    <span class="attribute">padding-top</span>:<span class="variable">$padding</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span>:<span class="variable">$padding</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.imgtext-h</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line">@<span class="keyword">include</span> horizontal-line(<span class="number">1px</span> solid <span class="number">#ccc</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.imgtext-h--product</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line">@<span class="keyword">include</span> horizontal-line(<span class="variable">$padding</span>:<span class="number">15px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;!--to css <span class="selector-tag">style</span>--&gt;</span><br><span class="line">    <span class="selector-class">.imgtext-h</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">	<span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#cccccc</span>;</span><br><span class="line">	<span class="attribute">padding-top</span>: <span class="number">10px</span>;</span><br><span class="line">	<span class="attribute">padding-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="selector-class">.imgtext-h--product</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> dashed <span class="number">#cccccc</span>;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>继承:选择器继承可以让选择器继承另一个选择器的所有样式，并联合声明。使用关键词@extend，后面紧跟需要继承的选择器。<br><em>占位选择器%：如果不调用则不会有任何多余的css文件，避免了以前在一些基础的文件中预定义了很多基础的样式，然后实际应用中不管是否使用了@extend去继承相应的样式，都会解析出来所有的样式。占位选择器以%标识定义，通过@extend调用</em>。</p>
</li>
<li>内置函数：用的最多应该是颜色函数（lighten减淡和darken加深，其调用方法为lighten($color,$amount)和darken($color,$amount)）</li>
<li><p>自定义函数: @fuction，@return</p>
 <figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$baseFontSize</span>:      <span class="number">10px</span> !default;</span><br><span class="line"><span class="variable">$gray</span>:              <span class="number">#ccc</span> !defualt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// pixels to rems</span></span><br><span class="line">@function pxToRem(<span class="variable">$px</span>) &#123;</span><br><span class="line">@return <span class="variable">$px</span> / <span class="variable">$baseFontSize</span> * 1rem;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>:<span class="variable">$baseFontSize</span>;</span><br><span class="line">    <span class="attribute">color</span>:lighten(<span class="variable">$gray</span>,<span class="number">10%</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.test</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>:pxToRem(<span class="number">16px</span>);</span><br><span class="line">    <span class="attribute">color</span>:darken(<span class="variable">$gray</span>,<span class="number">10%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>运算：对数值型的Value(如：数字、颜色、变量等)进行加减乘除四则运算</p>
</li>
<li><p>条件语句 <code>@if @else if @else</code> ;<br>三目运算：<code>if($condition, $if_true,</code>  三个参数分别表示：条件，条件为真的值，条件为假的值。</p>
 <figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">	<span class="variable">$lte7</span>: true;</span><br><span class="line"><span class="variable">$type</span>: monster;</span><br><span class="line"><span class="selector-class">.ib</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>:inline-block;</span><br><span class="line">@<span class="keyword">if</span> <span class="variable">$lte7</span> &#123;</span><br><span class="line">    *<span class="attribute">display</span>:inline;</span><br><span class="line">    *zoom:<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">@<span class="keyword">if</span> <span class="variable">$type</span> == ocean &#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">&#125; @<span class="keyword">else</span> if <span class="variable">$type</span> == matador &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125; @<span class="keyword">else</span> if <span class="variable">$type</span> == monster &#123;</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">&#125; @<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//css style</span></span><br><span class="line"><span class="comment">//-------------------------------</span></span><br><span class="line"><span class="selector-class">.ib</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>:inline-block;</span><br><span class="line">    *<span class="attribute">display</span>:inline;</span><br><span class="line">    *zoom:<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>for循环<br><code>@for $var from &lt;start&gt; through &lt;end&gt;</code><br><code>@for $var from &lt;start&gt; to &lt;end&gt;</code><br>$i表示变量，start表示起始值，end表示结束值<br>这两个的区别是关键字through表示包括end这个数，to则不包括end这个数。</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//sass style</span></span><br><span class="line">@<span class="keyword">for</span> <span class="variable">$i</span> from 1 through 3 &#123;</span><br><span class="line">    <span class="selector-class">.item-</span>#&#123;<span class="variable">$i</span>&#125; &#123; <span class="attribute">width</span>: <span class="number">2em</span> * <span class="variable">$i</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//to css style</span></span><br><span class="line">  <span class="selector-class">.item-1</span> &#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">2em</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="selector-class">.item-2</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">4em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item-3</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">6em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>each循环 (可以参考css精灵生成的sass代码，雷同呢~~)<br><code>@each $var in &lt;list or map&gt;</code><br>$var表示变量，list和map表示list类型数据和map类型数据</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//sass style</span></span><br><span class="line"><span class="variable">$animal-list</span>: puma, sea-slug, egret;</span><br><span class="line">@<span class="keyword">each</span> <span class="variable">$animal</span> in <span class="variable">$animal-list</span> &#123;</span><br><span class="line">    .#&#123;<span class="variable">$animal</span>&#125;-<span class="attribute">icon</span> &#123;</span><br><span class="line">	<span class="attribute">background-image</span>: url(<span class="string">'/images/#&#123;$animal&#125;.png'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//css style</span></span><br><span class="line">  <span class="selector-class">.puma-icon</span> &#123;</span><br><span class="line">      <span class="attribute">background-image</span>: url(<span class="string">'/images/puma.png'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="selector-class">.sea-slug-icon</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: url(<span class="string">'/images/sea-slug.png'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.egret-icon</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: url(<span class="string">'/images/egret.png'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//sass style </span></span><br><span class="line">	<span class="variable">$headings</span>: (h1: <span class="number">2em</span>, h2: <span class="number">1.5em</span>, h3: <span class="number">1.2em</span>);</span><br><span class="line">@<span class="keyword">each</span> <span class="variable">$header</span>, <span class="variable">$size</span> in <span class="variable">$headings</span> &#123;</span><br><span class="line">    #&#123;<span class="variable">$header</span>&#125; &#123;</span><br><span class="line">	<span class="attribute">font-size</span>: <span class="variable">$size</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//css style</span></span><br><span class="line">  <span class="selector-tag">h1</span> &#123;</span><br><span class="line">      <span class="attribute">font-size</span>: <span class="number">2em</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.5em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h3</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.2em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.w3cplus.com/sassguide/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.w3cplus.com/sassguide/&lt;/a&gt;&lt;/p&gt;
&lt;/block
    
    </summary>
    
    
      <category term="css" scheme="http://npxawebshare.github.io/tags/css/"/>
    
      <category term="sass" scheme="http://npxawebshare.github.io/tags/sass/"/>
    
      <category term="scss" scheme="http://npxawebshare.github.io/tags/scss/"/>
    
  </entry>
  
  <entry>
    <title>执法记录系统解决方案</title>
    <link href="http://npxawebshare.github.io/2016/08/11/%E6%89%A7%E6%B3%95%E8%AE%B0%E5%BD%95%E7%B3%BB%E7%BB%9F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://npxawebshare.github.io/2016/08/11/执法记录系统解决方案/</id>
    <published>2016-08-11T08:21:42.000Z</published>
    <updated>2016-08-11T08:27:12.136Z</updated>
    
    <content type="html"><![CDATA[<p>东方网力执法记录系统，主要是针对执法部门的特殊使用需求，推出的单警执法记录系统，能够实现执法场景录入、GPS定位、3G/4G无线图传、数据自动采集与上传、数据综合查询、管理、应用等功能，是执法部门实现息化、规范化的有力工具。<br>东方网力执法记录系统包含：执法记录仪前端、数据采集工作站、便携式采集仪以及执法记录仪管理平台。</p>
<h1 id="方案特色"><a href="#方案特色" class="headerlink" title="方案特色"></a>方案特色</h1><h2 id="智能先进的采集设备"><a href="#智能先进的采集设备" class="headerlink" title="智能先进的采集设备"></a>智能先进的采集设备</h2><p>基于Linux系统的采集设备，更安全，更稳定，而且没有版权等相关问题，同时也降低了成本。具备便携式采集设备，可随身携带，随时随地的对执法记录仪中的数据进行采集与存储。</p>
<h2 id="简洁高效的管理平台"><a href="#简洁高效的管理平台" class="headerlink" title="简洁高效的管理平台"></a>简洁高效的管理平台</h2><p>既可以支持多级分布式部署，也可支持集中式部署，具备集中的数据存储、数据管理、设备管理以及业务应用。通过严格的权限管理机制，可针对不同用户分配不同的功能权限，实现细粒度的权限管理。</p>
<h2 id="贴近实战的业务牵引"><a href="#贴近实战的业务牵引" class="headerlink" title="贴近实战的业务牵引"></a>贴近实战的业务牵引</h2><p>系统从业务上可分为前期的现场数据录摄、中期的自动化采集与上传、后期的集中管理与业务应用，覆盖办案数据管理各个环节，为管理部门提供流程化的数据管理以及深度量化的考核依据。</p>
<h2 id="深度融合的业务关联"><a href="#深度融合的业务关联" class="headerlink" title="深度融合的业务关联"></a>深度融合的业务关联</h2><p>可通过与其他业务系统对接，展开执法记录数据的关联与共享，深化多媒体业务信息的融合应用，消除信息孤岛。</p>
<h1 id="产品介绍"><a href="#产品介绍" class="headerlink" title="产品介绍"></a>产品介绍</h1><h2 id="执法记录仪"><a href="#执法记录仪" class="headerlink" title="执法记录仪"></a>执法记录仪</h2><p><img src="http://www.netposa.com/plugins/ueditor/php/upload/96741455846397.png" alt=""></p>
<ul>
<li><strong>视频拍摄：</strong>1080P高清视频拍摄，提供更准确的依据</li>
<li><strong>语音录制：</strong>高灵敏度、高信噪比拾音器，提供全方位语音录制</li>
<li><strong>图片抓拍：</strong>1600万像素图片拍摄，提供高质量画面</li>
<li><strong>红外夜视：</strong>多灯红外，夜间无盲区</li>
<li><strong>红外夜视3G/4G无线图传：</strong>通过移动网络，提供现场数据实时回传</li>
<li><strong>红外夜视GPS实时定位：</strong>实时定位，固定拍摄路线，实现指挥调度</li>
</ul>
<h2 id="数据采集仪"><a href="#数据采集仪" class="headerlink" title="数据采集仪"></a>数据采集仪</h2><p><img src="http://www.netposa.com/plugins/ueditor/php/upload1/20160219/14558464273490.png" alt=""></p>
<ul>
<li><strong>数据采集：</strong>无驱设计，接入设备后自动检测、采集</li>
<li><strong>数据存储：</strong>可分类保存所采集的执法记录仪数据</li>
<li><strong>数据检索：</strong>可根据一种或多种条件对数据进行查询</li>
<li><strong>数据浏览：</strong>可通过浏览器查看视音频、照片等数据</li>
<li><strong>数据上传：</strong>可将所采集的数据文件自动上传至管理平台</li>
<li><strong>充电校时：</strong>可对接入的执法记录仪进行自动充电与时间校对</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;东方网力执法记录系统，主要是针对执法部门的特殊使用需求，推出的单警执法记录系统，能够实现执法场景录入、GPS定位、3G/4G无线图传、数据自动采集与上传、数据综合查询、管理、应用等功能，是执法部门实现息化、规范化的有力工具。&lt;br&gt;东方网力执法记录系统包含：执法记录仪前端、
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>pva</title>
    <link href="http://npxawebshare.github.io/2016/08/11/pva/"/>
    <id>http://npxawebshare.github.io/2016/08/11/pva/</id>
    <published>2016-08-11T08:16:18.000Z</published>
    <updated>2016-08-11T08:59:09.732Z</updated>
    
    <content type="html"><![CDATA[<p> 视云实战应用解决方案以视频为核心，整合摄像机、卡口、电警、GPS、灯杆以及社会监控资源等各类资源，实现视频图像资源的信息共享和统一管理。通过梳理分析公安各部门各警种对实战应用的需求，采用云计算、大数据分析以及基于深度学习的智能识别算法等先进技术，为用户提供了跨区域、跨部门、跨警种的办案平台以及专业的视频分析服务，提升警务资源利用和服务价值，为预防打击违法犯罪、维护社会稳定提供有力的信息决策手段，全面支撑智慧城市建设与社会经济发展。<br><img src="http://www.netposa.com/plugins/ueditor/php/upload/71621455848215.png" alt=""></p>
<h1 id="方案特色"><a href="#方案特色" class="headerlink" title="方案特色"></a>方案特色</h1><h2 id="强大的资源整合"><a href="#强大的资源整合" class="headerlink" title="强大的资源整合"></a>强大的资源整合</h2><p>充分整合各类视频监控资源，包括各级公安机关自建的监控摄像机、测速卡口、电子警察和社会监控资源等，实现资源的统一存储、统一管理和互联共享。</p>
<h2 id="开放的视频云架构"><a href="#开放的视频云架构" class="headerlink" title="开放的视频云架构"></a>开放的视频云架构</h2><p>采用开放的视频云架构，支持并行计算、按需使用、动态分配、分布式部署，实现海量视频图像信息的高效存储、快速分析、计算与检索。</p>
<h2 id="准确的车辆识别"><a href="#准确的车辆识别" class="headerlink" title="准确的车辆识别"></a>准确的车辆识别</h2><p>基于深度学习技术和智能分析算法，实现了卡口图片的二次识别，精确的提取车牌、车标、车型、年款、车辆颜色等特征信息，提高车辆信息的准确性和完整性，为基于大数据的查询检索、深度挖掘、串并分析等应用提供了有效信息支撑。</p>
<h2 id="高效的检索性能"><a href="#高效的检索性能" class="headerlink" title="高效的检索性能"></a>高效的检索性能</h2><p>采用基于自主知识产权的优化并行加速查询引擎技术（OPAQ），实现海量数据高效的检索能力。</p>
<h2 id="深入的数据挖掘"><a href="#深入的数据挖掘" class="headerlink" title="深入的数据挖掘"></a>深入的数据挖掘</h2><p>通过大数据分析技术，实现对海量数据的深度挖掘和应用，更准确的进行关联比对和技战法研判分析，为公安用户的警情研判、打击违法犯罪提供技术支持。</p>
<h2 id="面向多警种的实战应用"><a href="#面向多警种的实战应用" class="headerlink" title="面向多警种的实战应用"></a>面向多警种的实战应用</h2><p>结合公安各警种视频业务需求，提供海量视频图像资源信息的深度挖掘与联动分析应用功能，满足科信、刑侦、治安、交通、指挥中心等多警种的实战应用。</p>
<h1 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h1><h2 id="视频指挥"><a href="#视频指挥" class="headerlink" title="视频指挥"></a>视频指挥</h2><p>基于电子地理信息系统（GIS）整合视频、卡口、电警、灯杆和警力等资源，以图形化展示道路资源、摄像机点位、警力部署等信息资源，使指挥调度更加直观高效。</p>
<h2 id="全景追逃"><a href="#全景追逃" class="headerlink" title="全景追逃"></a>全景追逃</h2><p>采用视频网格追踪技术，快速查找目标视频周边全方位的摄像机资源，及时跟踪定位嫌疑目标，实现公安警务追逃工作的智能化和可视化。</p>
<h2 id="实时结构化"><a href="#实时结构化" class="headerlink" title="实时结构化"></a>实时结构化</h2><p>采用先进的智能分析技术，自动提取实时视频图像中的人体、人脸和车辆的细节特征信息，对目标类型、颜色等形成结构化描述，为事后研判分析提供数据基础，保证信息查找检索的高效性，提高公安视频应用的效率。</p>
<h2 id="视频图像信息库"><a href="#视频图像信息库" class="headerlink" title="视频图像信息库"></a>视频图像信息库</h2><p>高质量低容量的集中存储涉案或具有涉案嫌疑、重大事件预警、系列案件涉及区域、重要敏感期、重要场所等海量视频图像信息和结构化信息，为公安机关侦查破案、查找线索、取阅证据等提供强有力的数据支撑。<br><img src="http://www.netposa.com/plugins/ueditor/php/upload/72391455848215.png" alt=""></p>
<p>##人脸比对<br>基于领先的人脸识别算法，采用云计算技术，提供人脸特征与布控人脸库的在线识别比对，支持对“千万级”城市人口库的检索，实现“一点布控、全网响应”。</p>
<h2 id="多维搜车"><a href="#多维搜车" class="headerlink" title="多维搜车"></a>多维搜车</h2><p>支持车牌号码、车牌颜色、车辆类型、车辆颜色、车辆品牌、车辆型号等9 大条件任意模糊组合查询，真正做到10 亿级数据秒级返回。<br><img src="http://www.netposa.com/plugins/ueditor/php/upload/95141455848215.png" alt=""></p>
<h2 id="车型库"><a href="#车型库" class="headerlink" title="车型库"></a>车型库</h2><p>集合近3000 种车型构成行业内领先的车型库，支持通过车型细节特征快速锁定车型，帮助公安在打击车辆犯罪过程中实现“快速识车、一键搜车”，突破案件侦破环节中缺乏车型认知的瓶颈。</p>
<h2 id="车辆技战法分析"><a href="#车辆技战法分析" class="headerlink" title="车辆技战法分析"></a>车辆技战法分析</h2><p>基于大数据技术针对海量通行记录深度挖掘潜在规律，实现行车轨迹分析、跟车分析、区域碰撞分析、套牌分析、落脚点分析、首次入城、昼伏夜出等十大技战法，贴合公安实战经验，实现车辆全天候无死角的信息检索，及时便捷、快速准确筛选涉案关键信息，锁定嫌疑车辆。<br><img src="http://www.netposa.com/plugins/ueditor/php/upload/9951455848215.png" alt=""></p>
<h2 id="外地车辆统计"><a href="#外地车辆统计" class="headerlink" title="外地车辆统计"></a>外地车辆统计</h2><p>支持从卡口、组织机构、车型属性等多维度对行车流量的历史数据和实时数据进行统计分析，使得交通规划、车辆疏导、警力部署等工作有的放矢有理有据。<br><img src="http://www.netposa.com/plugins/ueditor/php/upload/30571455848215.png" alt=""></p>
<h1 id="典型案例"><a href="#典型案例" class="headerlink" title="典型案例"></a>典型案例</h1><ol>
<li>内蒙古自治区公安厅视频图像信息联网平台项目</li>
<li>上海市公安局图像信息摘要处理系统项目</li>
</ol>
<p>[TOC]</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 视云实战应用解决方案以视频为核心，整合摄像机、卡口、电警、GPS、灯杆以及社会监控资源等各类资源，实现视频图像资源的信息共享和统一管理。通过梳理分析公安各部门各警种对实战应用的需求，采用云计算、大数据分析以及基于深度学习的智能识别算法等先进技术，为用户提供了跨区域、跨部门
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>PVA Environment Building</title>
    <link href="http://npxawebshare.github.io/2016/07/21/PVA-Environment-Building/"/>
    <id>http://npxawebshare.github.io/2016/07/21/PVA-Environment-Building/</id>
    <published>2016-07-21T09:30:52.000Z</published>
    <updated>2016-08-03T07:49:07.885Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PVA开发环境搭建说明"><a href="#PVA开发环境搭建说明" class="headerlink" title="PVA开发环境搭建说明"></a>PVA开发环境搭建说明</h1><h2 id="一、开发前准备"><a href="#一、开发前准备" class="headerlink" title="一、开发前准备"></a>一、开发前准备</h2><h3 id="1、开发环境"><a href="#1、开发环境" class="headerlink" title="1、开发环境"></a>1、开发环境</h3><p>Windows操作系统 32位/64位</p>
<p>相关资源获取，在公司的共享服务器的目录中有全套的开发工具可供快速下载 地址：<code>\\192.168.60.170\xian_Test\10_开发使用工具\PVA开发工具套装</code></p>
<ul>
<li>SVN：源代码版本控制和管理系统</li>
<li>JDK：Java程序开发和运行环境</li>
<li>MySQL：关系型数据库服务</li>
<li>相应的还需要数据库客户端，推荐使用Navicat</li>
<li>项目中还会用到其它类型的数据库类型比如MongoDB、Redis等后面将会介绍</li>
<li>Maven：项目构建工具</li>
<li>Eclipse：Java程序开发IDE（也可以使用IntelliJ IDEA）目前公司的两个规定范围内的两个Java开发工具</li>
</ul>
<h3 id="2、运行环境"><a href="#2、运行环境" class="headerlink" title="2、运行环境"></a>2、运行环境</h3><ul>
<li>Tomcat：程序发布、部署的运行服务器</li>
<li>Nginx：反向代理服务器</li>
</ul>
<h3 id="3、其它依赖"><a href="#3、其它依赖" class="headerlink" title="3、其它依赖"></a>3、其它依赖</h3><p>PVA部署还需要一些依赖服务和第三方程序，但这些在开发期间并不影响主程序的启动运行，后面再做具体介绍。在此只做简单了解：</p>
<p>依赖服务器（包括公司的内部服务以及其它服务）：</p>
<ul>
<li>PVG：所有前端设备（例如：摄像头）的管理平台（提供设备的基础数据）。</li>
<li>PCC：分布式计算平台（提供算法服务）。</li>
<li>PFS：云存储平台。</li>
<li>TideDB：公司内部的实时存储数据库服务（主要是存取一些GPS信息）。</li>
<li>MD：万能解码器服务（简称“万解”）</li>
</ul>
<p>第三方服务：</p>
<ul>
<li>MongoDB：Nosql数据库服务（用于系统日志信息的存储）</li>
<li>Redis：Nosql数据库服务（用于系统的Session共享以及其它一些数据缓存及消息订阅服务）。</li>
<li>ActiveMQ：消息通讯服务器。</li>
</ul>
<h2 id="二、搭建步骤"><a href="#二、搭建步骤" class="headerlink" title="二、搭建步骤"></a>二、搭建步骤</h2><h3 id="1、安装SVN、下载项目源码"><a href="#1、安装SVN、下载项目源码" class="headerlink" title="1、安装SVN、下载项目源码"></a>1、安装SVN、下载项目源码</h3><p><img src="image003.png" alt="pic"></p>
<p>直接双击安装包进行安装,安装完成后，在已经申请了SVN权限的前提下（如果没有权限可找相关负责人进行申请）Checkout<br>地址：<code>http://192.168.60.251/svn/xian-new/pva_project/trunk</code><br><img src="image004.png" alt="pic"><br><img src="image006.png" alt="pic"></p>
<h3 id="2、安装JDK-JAVA开发环境和MySQL服务。"><a href="#2、安装JDK-JAVA开发环境和MySQL服务。" class="headerlink" title="2、安装JDK  JAVA开发环境和MySQL服务。"></a>2、安装JDK  JAVA开发环境和MySQL服务。</h3><p><img src="image007.png" alt="pic"><br>运行安装JDK，并配置全局环境变量。<br><img src="image008.png" alt="pic"><br>运行图中的安装程序安装MySQL服务程序，安装过程中可设置管理员用户名和密码（一般为username:root  password:1234或root）<br><img src="image009.png" alt="pic"><br>安装完MySQL服务之后接下来安装服务器客户端Navicat<br><img src="image010.png" alt="pic"><br><img src="image011.png" alt="pic"><br>然后导入PVA数据库脚本文件建立PVA数据库脚本文件在第一步中SVN导出的代码结构中的doc文件夹中，如下图所示：<br><img src="image012.png" alt="pic"><br>进入下面目录中<br><img src="image013.png" alt="pic"><br><b style="color: red">右键文本编辑的形式</b>打开图中标出的文件<br><img src="image015.png" alt="pic"><br>按照图中指出的<b style="color: red">修改对应的用户名和密码为自己本地的配置</b>，保存后再将该文件<b style="color: red">双击运行</b>即可导入PVA初始的建库脚本到本地的MySQL服务器中。</p>
<p>导入完成后可以从Navicat客户端里看到pva数据库中的表结构信息<br><img src="image017.png" alt="pic"><br>表比较多，大多属于业务相关的表，另有关于数据库表介绍的文件进行具体介绍，这里就不做过多。</p>
<p>接下来还需要导入数据库的增量脚本，文件目录如下图所示：<br><img src="image019.png" alt="pic"><br><img src="image021.png" alt="pic"><br>在Navicat中鼠标右键点击pva数据库，选择运行SQL文件选项<br><img src="image022.png" alt="pic"><br>选中升级脚本文件然后点击开始，等待完成。</p>
<p>至此，PVA数据库已被完整的创建。</p>
<p>###3、创建本地构建库、安装Maven构建工具</p>
<p>首先要在本地创建一个本地构建代码库用来存储一些项目所依赖的内部或第三方的依赖包。<br>推荐路径为：<code>D:\Java\maven-repository</code><br>建好本地构建库的文件夹后，接下来安装Maven构建工具<br><img src="image024.png" alt="pic"><br>从PVA开发工具套装中获取Maven包后，打开可以看到里面有如上图所示的文件，其中apache-maven-3.0.5.zip为免安装工具包，直接解压到自己合适的硬盘位置中即可，如下图所示：<br><img src="image025.png" alt="pic"><br>另外<strong>settings.xml</strong>文件是已经是按照PVA项目信息配置好的maven配置文件，如果本地构建库为上面推荐的目录（<code>D:\Java\maven-repository</code>）的话，可用该文件直接<strong>替换掉conf文件夹中的相同文件</strong>。<br>如果本地构建库的目录与推荐路径不一致则需要打开该文件进行修改：<br> <img src="image027.png" alt="pic"><br>只需将图中标记的部分修改为自己的构建库目录即可。</p>
<p><strong>添加maven的环境变量</strong>,如下图所示<br><img src="image029.png" alt="pic"><br>至此，本地构建环境搭建完成。</p>
<h3 id="4、非IDE的程序编译打包"><a href="#4、非IDE的程序编译打包" class="headerlink" title="4、非IDE的程序编译打包"></a>4、非IDE的程序编译打包</h3><p>由于maven本身就是一个构建工具，因此可以通过一些命令进行程序的编译和打包。</p>
<p>打开项目源码中的code文件夹可以看到一个mvn cmd.txt的文件，如下图所示：<br> <img src="image031.png" alt="pic"><br>打开该文件可以看到一些常用的编译、打包等命令<br> <img src="image033.png" alt="pic"><br>不过，在编译打包之前我们需要先修改一些配置信息</p>
<p>打开项目源码按照下图的目录找到标记的文件并打开<br><img src="image035.png" alt="pic"><br><img src="image037.png" alt="pic"></p>
<p>将图中标出的部分改为当前机器（本机）的配置参数，主要是数据库名称和IP地址、数据库的用户名和密码信息，这样就可以保证程序在本地可以编译且运行。</p>
<p>至于该文件的其它配置信息此处先不做详细解释，后面将会具体介绍。</p>
<p>现在就可以对程序进行编译打包：<br>进入CMD模式找到程序源代码（code文件夹）所在的包，然后输入下面命令：<code>mvn -U -DskipTests clean install</code> ,回车即可。</p>
<p><strong>注意：</strong>如果当前机器是第一次构建，由于本地构建库没有任何依赖包，因此需要动态的从公司的公共内部库进行自动load依赖包，导致编译过程可能比较慢，耐心等待即可。<br><img src="image039.png" alt="pic"><br>当看到下图中的信息时表示已经成功的编译完整个PVA项目工程。<br><img src="image040.png" alt="pic"></p>
<p>其中图中的上面标记出的部分可以看出构建好的包自动被打到本地构建库中，这时可以根据目录去本地的构建库中去查看已经打好的包（同时也会发现本地的maven构建库中多了很多包，这是构建过程中自动下载的依赖包，以后再编译就不用再去服务器下载）。<br> <img src="image042.png" alt="pic"><br>同样也可以在code/bin文件夹中找到被打好的包，如下图所示：<br><img src="image044.png" alt="pic"></p>
<h3 id="5、运行环境以及依赖配置"><a href="#5、运行环境以及依赖配置" class="headerlink" title="5、运行环境以及依赖配置"></a>5、运行环境以及依赖配置</h3><h4 id="a、安装Tomcat服务器"><a href="#a、安装Tomcat服务器" class="headerlink" title="a、安装Tomcat服务器"></a>a、安装Tomcat服务器</h4><p><img src="image046.png" alt="pic"><br>该zip包是一个免安装的tomcat安装包，解压到合适的位置即可。</p>
<p>接下来需要配置tomcat的环境变量:<br>在系统变量中添加 <code>CATALINA_BASE</code>和<code>CATALINA_HOME</code>两个变量，值均为tomcat的根目录（含bin文件夹的目录）如下图所示：<br><img src="image047.png" alt="pic"><br>同时，还需要在Path变量中添加下图中的两个值<br> <img src="image048.png" alt="pic"><br>到这里已经将tomcat服务器安装配置完成。</p>
<h4 id="b、依赖项"><a href="#b、依赖项" class="headerlink" title="b、依赖项"></a>b、依赖项</h4><p>PVA如果要运行起来还需要依赖一些其它的程序和配置。<br><img src="image049.png" alt="pic"></p>
<p><strong>动态库：</strong></p>
<p>首先找到主干代码包中的<code>depends\pva-depend-sdk-[svn56357]\windows_x64</code>包，需要将该包的路径添加到Path环境变量中，如下面地址<code>D:\CODE\pva_project\trunk\depends\pva-depend-sdk-[svn56357]\windows_x64</code></p>
<p><strong>依赖包：</strong>上图中的depends包是运行必不可少的包。pub_code包是一些依赖包的源码。</p>
<p><strong>前端代码：</strong>src包中全部为PVA的前端代码。</p>
<p><strong>LBS：</strong>lbs是PVA项目中使用的地图相关的资源，同样也需要配置。Lbs代码的SVN地址为（如果没有权限可找相关负责人帮助申请）:<code>http://192.168.60.251/svn/xian-new/gis_platform/trunk/code</code><br><img src="image050.png" alt="pic"></p>
<h4 id="c、Nginx安装和配置"><a href="#c、Nginx安装和配置" class="headerlink" title="c、Nginx安装和配置"></a>c、Nginx安装和配置</h4><p>从共享目录中去除nginx-1.6.2的包，打开里面的conf文件夹需要改动两个文件：<br>nginx.conf和netposa包中的pva.conf</p>
<p>1、nginx.conf中将下图所标出的IP和端口号改为本机的信息即可。<br><img src="image051.png" alt="pic"><br>2、pva.conf中将下图中标记的部分分别改为本机的前端代码src包的目录和lbs地图资源包visualcommand的目录即可。<br> <img src="image052.png" alt="pic"><br><strong>另外：</strong> 启动nginx服务可以使用<code>start nginx</code>命令也可以双击nginx.exe运行，如果用户在nginx正在运行的情况下修改了相关配置文件，则需要重启nginx服务，可以使用<code>nginx –s reload</code>命令进行重启，从而是修改的配置生效。<br> <img src="image054.png" alt="pic"></p>
<h4 id="d、安装谷歌浏览器"><a href="#d、安装谷歌浏览器" class="headerlink" title="d、安装谷歌浏览器"></a>d、安装谷歌浏览器</h4><p>从共享目录PVA开发工具套装中可以找到浏览器安装包。将其安装到本地，该浏览器是我们开发中所使用的主要浏览器。<br><img src="image055.png" alt="pic"></p>
<h3 id="6、启动PVA服务"><a href="#6、启动PVA服务" class="headerlink" title="6、启动PVA服务"></a>6、启动PVA服务</h3><p>在上面的步骤中我们已经做好了准备工作，现在就可以启动PVA服务了。</p>
<p>1、首先将tomcat根目录中的webapps\ROOT目录下清空，然后将上面第4步中打好的包（主要是META-INF包和WEB-INF两个包）取出来，放入到ROOT包中。</p>
<p>2、启动nginx服务。</p>
<p>3、启动tomcat服务：双击bin目录下的startup.bat文件或者在当前目录下用<code>catalina run</code>命令来启动运行。<br><img src="image056.png" alt="pic"><br>4、看到下图中所标记的部分且程序没有报错即表示服务已经成功启动。<br><img src="image057.png" alt="pic"></p>
<p>5、打开谷歌浏览器查看主页<code>http://localhost:81/login/</code>  （建议开发人员保存常用的url以方便后续开发和调试）。在浏览器中输入上面的URL地址可以看到下面的界面<br><img src="image059.png" alt="pic"></p>
<p>系统默认的初始管理员登录帐号是用户名：admin 密码：admin</p>
<p>登录成功之后会提示更改密码，按步骤操作即可。</p>
<p>如果本地未安装OCX视频播放插件，系统还会提示安装相应插件，同样按步骤操作安装（默认安装）即可。安装之后需要重启浏览器并重新登录。</p>
<p>这次登录成功后会看到下图中页面，至此PVA服务已经成功启动。<br><img src="image061.png" alt="pic"></p>
<h2 id="三、IDE开发介绍"><a href="#三、IDE开发介绍" class="headerlink" title="三、IDE开发介绍"></a>三、IDE开发介绍</h2><h3 id="Eclipse开发环境"><a href="#Eclipse开发环境" class="headerlink" title="Eclipse开发环境"></a>Eclipse开发环境</h3><p>Eclipse是当下非常流行的java开发IDE，此处不对IDE本身做过多介绍，只是说明一下PVA开发，Eclipse需要配置的地方。</p>
<h4 id="JRE配置"><a href="#JRE配置" class="headerlink" title="JRE配置"></a>JRE配置</h4><p> <img src="image063.png" alt="pic"></p>
<h4 id="Maven配置"><a href="#Maven配置" class="headerlink" title="Maven配置"></a>Maven配置</h4><p>不要是用Eclipse自带的Maven设置，添加本机已安装的Maven根目录，然后勾选。<br> <img src="image065.png" alt="pic"></p>
<p>同时，User Settings选项也要改为本机的Maven配置文件的目录<br> <img src="image067.png" alt="pic"></p>
<h4 id="导入源码并编译"><a href="#导入源码并编译" class="headerlink" title="导入源码并编译"></a>导入源码并编译</h4><p>我们的项目开发使用的是Maven管理工具，因此通过Maven导入的方式整体导入项目所需要的所有工程。<br>点击<code>File –&gt; import</code>选项<br><img src="image069.png" alt="pic"></p>
<p>选中图中标出的选项，点击Next</p>
<p>点击Browse找到PVA后端源码（code包）的位置，然后选中code包确定。如下图所示：<br> <img src="image070.png" alt="pic"></p>
<p>接着再点击Finish完成导入。<br> <img src="image072.png" alt="pic"></p>
<p>编译代码：</p>
<p>直接编译项目最顶层的程序（<code>pva-server</code>）即可<br> <img src="image074.png" alt="pic"></p>
<ul>
<li>右键上图的项目-&gt;Run as -&gt; 选择第二个Maven build（下次运行选择第一个即可）</li>
<li>在Goals选项框中输入 clean install</li>
<li>点击Apply -&gt; Run</li>
<li>从Console中看到编译的过程，当看到BUILD SUCCESS时即表示构建成功</li>
</ul>
<p><strong>注意：每次编译后都要将被编译的项目刷新一下，否则发布会时可能报错（这是Eclipse的一个小问题）</strong></p>
<h4 id="创建服务器配置"><a href="#创建服务器配置" class="headerlink" title="创建服务器配置"></a>创建服务器配置</h4><p>操作顺序如下面所示<br><code>File -&gt; New -&gt; Other -&gt; Server -&gt; Server -&gt; Next</code></p>
<p>这时可以看到下面界面<br><img src="image075.png" alt="pic"></p>
<ul>
<li>点击Finish完成创建</li>
</ul>
<p>如果没有Servers窗口，则需要下面操作显示Servers窗口<br><code>Window -&gt; Show View -&gt; Servers</code><br> <img src="image076.png" alt="pic"></p>
<p>可以在下面的窗口中看到我们添加的服务器配置</p>
<ul>
<li>鼠标右键点击图中标出的部分选择 Add and Remove选项 添加 pva项目</li>
<li>接着双击上图中标记的部分</li>
<li>将Overview视图中的Timeouts选项中的Start (in seconds)选项中的时间设置的大一些（比如1000）</li>
<li>再点击Modules视图</li>
<li>选中pva的那一项然后点击 Edit</li>
<li>保持与下图中的设置一致，确认后OK<br><img src="image077.png" alt="pic"></li>
</ul>
<p>然后就可以通过Eclipse启动服务了，一般都采用Debug模式启动，方便跟踪问题。</p>
<p>常用的启动命令，编译刷新后 选中服务配置项</p>
<ul>
<li>Ctrl+Shift+P：发布工程</li>
<li>Ctrl+Shift+D：Debug模式启动工程</li>
</ul>
<h2 id="四、其它相关"><a href="#四、其它相关" class="headerlink" title="四、其它相关"></a>四、其它相关</h2><h3 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB:"></a>MongoDB:</h3><p>MongoDB主要是用来存储系统日志信息的，具体的配置和使用可以从开发工具套装的包里获取MongoDB的安装包里的说明文档查看具体的使用方法。<br><img src="image078.png" alt="pic"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;PVA开发环境搭建说明&quot;&gt;&lt;a href=&quot;#PVA开发环境搭建说明&quot; class=&quot;headerlink&quot; title=&quot;PVA开发环境搭建说明&quot;&gt;&lt;/a&gt;PVA开发环境搭建说明&lt;/h1&gt;&lt;h2 id=&quot;一、开发前准备&quot;&gt;&lt;a href=&quot;#一、开发前准备&quot; c
    
    </summary>
    
    
      <category term="环境搭建，pva" scheme="http://npxawebshare.github.io/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%EF%BC%8Cpva/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript编程规范</title>
    <link href="http://npxawebshare.github.io/2016/07/13/codeStandards/"/>
    <id>http://npxawebshare.github.io/2016/07/13/codeStandards/</id>
    <published>2016-07-13T02:11:48.000Z</published>
    <updated>2016-08-11T09:18:03.165Z</updated>
    
    <content type="html"><![CDATA[<p><link href="http://cdn.bootcss.com/highlight.js/8.0/styles/monokai_sublime.min.css" rel="stylesheet">  </p>
<script src="http://cdn.bootcss.com/highlight.js/8.0/highlight.min.js"></script>  
<script>
    hljs.initHighlightingOnLoad();
</script>   

<h2 id="代码编写规范"><a href="#代码编写规范" class="headerlink" title="代码编写规范"></a>代码编写规范</h2><h3 id="文件编码格式"><a href="#文件编码格式" class="headerlink" title="文件编码格式"></a>文件编码格式</h3><p>所有诸如JS，HTML，CSS等文本类型文件的编码格式必须使用UTF8方式。文件内的换行符统一使用UNIX风格或者Window风格，文件编辑过程中最好不要变更。</p>
<a id="more"></a>
<h3 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h3><p>缩进可以使用4个空格或者TAB键，但在同一个工程项目里，必须使用一致的缩进方式。建议使用TAB键，并且将编辑器的TAB键字符宽度设为4，好处是编程时不用刻意关注排版缩进，避免分散注意力；而且大部分编辑器都能提供自动排版工具，基本都以TAB键为主。</p>
<h3 id="行宽"><a href="#行宽" class="headerlink" title="行宽"></a>行宽</h3><ul>
<li>原则上不允许让一行代码超过80个字符（包括TAB键），鉴于主流屏幕分辨率的提高，100字符内的行宽也是可接受范围。</li>
<li>当一条语句不能在单独一行写完时，有必要拆分它。一般在操作符后进行拆分，这样可以减少了通过插入分号伪装copy-paste错误的可能性。</li>
<li>后续拆分行应该缩进2个单位，与正常块缩进区分开来。</li>
</ul>
<h3 id="括号的使用以及块的定义"><a href="#括号的使用以及块的定义" class="headerlink" title="括号的使用以及块的定义"></a>括号的使用以及块的定义</h3><p><strong>括号的使用配对必须对齐使用。</strong></p>
<p>1.当大括号用于块结构时：左括号应当位于块起始行的最后一个字符，与前一个符号，函数名等间隔一个空格，与保留字之间保留一个空格或者不留空格；右括号应当与块起始位置对齐。例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//case 1:</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//my function body ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//case 2:</span></span><br><span class="line"><span class="keyword">var</span> myFun = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//my  function body ...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//case 3:</span></span><br><span class="line"><span class="keyword">if</span> (a &gt; <span class="number">100</span>) &#123;</span><br><span class="line">    <span class="comment">//TODO</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//TODO</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>备注:此规则的应用可以借助代码格式化(或者格式化插件)实现，<strong>需要注意的是</strong>，<em>建议大家都应该在编写代码的时候养成好的习惯，而不要过分依赖格式化插件，特别是对于修改之前别人写的代码，如果贸然格式化将会引起大范围的diff差异，慎用;</em></p>
</blockquote>
<p>2.当括号用于非块级结构时：括号前后如为操作符，应当间隔一个空格；其他情况，特别是函数名，分号，逗号，或者其他括号时，之后应当不留空格。例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = fun1(<span class="number">1</span>, <span class="number">2</span>) + <span class="number">3</span>;</span><br><span class="line"><span class="keyword">var</span> b  = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>]];</span><br><span class="line"><span class="keyword">var</span> c = &#123;&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>备注:此规则的应用可以借助代码格式化(或者格式化插件)实现，<strong>需要注意的是，</strong> <em>建议大家都应该在编写代码的时候养成好的习惯，而不要过分依赖格式化插件，特别是对于修改之前别人写的代码，如果贸然格式化将会引起大范围的diff差异，慎用;</em></p>
</blockquote>
<p><strong>3.当括号用于比较大的数据结构时，应当按照块级结构的方式进行编写。例如：</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> positions = [&#123;</span><br><span class="line">    x: <span class="number">1</span>,</span><br><span class="line">    y: <span class="number">2</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    x: <span class="number">4</span>,</span><br><span class="line">    y: <span class="number">6</span></span><br><span class="line">&#125;];</span><br><span class="line"><span class="keyword">var</span> a = [&#123;</span><br><span class="line">    a: <span class="string">"one"</span>,</span><br><span class="line">    b: <span class="number">1</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    a: <span class="string">"two"</span>,</span><br><span class="line">    b: <span class="number">1</span></span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = [</span><br><span class="line">        [<span class="string">"one"</span>, <span class="string">"local site"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="comment">/*TODO*/</span>&#125;],</span><br><span class="line">        [<span class="string">"step2"</span>, <span class="string">"remote site"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="comment">/*TODO*/</span>&#125;]</span><br><span class="line">];</span><br></pre></td></tr></table></figure>
<blockquote>
<p>备注:此规则的应用可以借助代码格式化(或者格式化插件)实现，<strong>需要注意的是，*</strong>建议大家都应该在编写代码的时候养成好的习惯，而不要过分依赖格式化插件，特别是对于修改之前别人写的代码，如果贸然格式化将会引起大范围的diff差异，慎用;*</p>
</blockquote>
<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><ul>
<li>应当尽可能编写注释，留下可供阅读和分析的信息，帮助理解程序逻辑。</li>
<li>注释首要是正确，其次是清晰易懂；建议使用英文作简短说明，如有必要也可使用中文。</li>
<li>注释中请勿传递负面情绪。</li>
</ul>
<p>以下情况建议多写注释：</p>
<ul>
<li>主要模块／类／接口／公用方法的代码块前面或者文件头部；</li>
<li>关键代码块或者包含复杂逻辑时，应当说明；</li>
<li>特殊原因编写晦涩的代码时，必须编写注释说明代码意图以及执行结果；</li>
<li>跨度较大的代码，应当按照逻辑块同时空行分割，并编写简短代码注释；</li>
<li>承载主要业务逻辑的变量和函数应当有适当的注释说明其用途；</li>
</ul>
<p>块注释主要使用在前三种情况，而后两种情况主要使用行注释。</p>
<p>块级注释样例：（包括概述、作者、日期、参数说明）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * [cacheAjaxObject 缓存ajax对象，以便于查看和取消]</span><br><span class="line"> * @author yuqiu</span><br><span class="line"> * @date 2014-12-02T14:23:21+0800</span><br><span class="line"> * @param   &#123;[type]&#125;        ajaxUrl [后端接口地址]</span><br><span class="line"> * @param   &#123;[type]&#125;        params  [参数]</span><br><span class="line"> * @param   &#123;[type]&#125;        type    [GET or POST]</span><br><span class="line"> * @param   &#123;[type]&#125;        custom [ajax更多参数配置]</span><br><span class="line"> * @return   &#123;[type]&#125;                [返回一个ajax对象]</span><br><span class="line"> */</span></span><br><span class="line">cacheAjaxObject: <span class="function"><span class="keyword">function</span>(<span class="params">ajaxUrl, params, type, custom</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//TODO</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h3><p><strong>所有的变量应该在使用前声明，并且赋予初始值（循环变量可以不考虑）或者null，避免使用undefined；关于全局变量的声明和使用会在后续单独说明。</strong></p>
<p>变量的声明顺序应当按照在当前代码块内出现的先后顺序进行声明，并且按照承载的业务逻辑使用空行进行分割；</p>
<p>原则上每行声明一个变量并且给予注释，但对于相关度较高的变量可以定义在一个var语句中，例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> width=<span class="number">80</span>, height=<span class="number">60</span>; <span class="comment">//头像区域大小</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> groupController = <span class="literal">null</span>,     <span class="comment">//组控制器，用户回调刷新</span></span><br><span class="line"></span><br><span class="line">        mapCircleView = <span class="literal">null</span>,   <span class="comment">//地图部分防控圈对象</span></span><br><span class="line"></span><br><span class="line">        controller = <span class="literal">null</span>,      <span class="comment">//控制器对象</span></span><br><span class="line"></span><br><span class="line">        compiler = <span class="literal">null</span>,        <span class="comment">//保存模板对象</span></span><br><span class="line"></span><br><span class="line">        templateUrl = <span class="string">"inc/connection/left/defence-circle-new.html"</span>,     <span class="comment">//模板路径</span></span><br><span class="line"></span><br><span class="line">        eventHandler = &#123;&#125;;      <span class="comment">//事件处理程序</span></span><br></pre></td></tr></table></figure>
<h3 id="方法声明"><a href="#方法声明" class="headerlink" title="方法声明"></a>方法声明</h3><ul>
<li>内部方法的定义应当以命名函数为主，并且在被调用的代码处就近定义，一般情况下建议置于变量声明之后，并按照在后续代码中出现的调用顺序排列。命名函数的两种写法（case1是函数声明，case2是函数表达式）：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//case 1:</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//my  function body ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//case 2:</span></span><br><span class="line"><span class="keyword">var</span> myFun = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//my  function body ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li>对外接口则主要考虑使用对匿名函数的引用，匿名函数也多用于函数回调。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对外接口</span></span><br><span class="line"> <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"> &#125;;</span><br><span class="line"><span class="comment">//回调函数</span></span><br><span class="line">myFun(param1, param2, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//TODO</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h3><p>命名主要由应该由26个大小写字母(A .. Z, a .. z)，10个数字(0 .. 9)和_(下划线)组成。除框架用的全局变量或者方法，不要使用$符号。详细规则如下：</p>
<ul>
<li>常规方法名和变量名请使用首字母小写的Camel命名法，例如：isDate,fPressed，checkIfLocalStorage等等；</li>
<li>类，模块，名字空间等结构性函数或者全局变量等请使用首字母答谢的Camel命名法，例如：PopWindow，EditDialog，UserModel，DebugLevel等等; <strong>若是常量，采用单词大写和下划线拼接的方式，如ACTION_URL等</strong>；</li>
<li>类，模块，接口，命名空间等结构性函数或者变量内的私有性质的函数或者变量，请在常规命名前添加下划线；请注意：这里只提供阅读上的方便，不保证其实际私有性实现；</li>
<li>全局函数和方法的快捷方式，可以在常规命名前添加$符号；不推荐经常使用$符号作为命名的一部分（<strong>jQuery对象的命名建议以$符开始，方便阅读</strong>），尤其禁止使用单个$符号命名变量或方法；命名中也不允许出现多个$符号；</li>
<li>避免使用保留字或者有可能成为保留字的命名成为属性，方法，或者变量的名字；</li>
</ul>
<p>样例如下：</p>
<pre><code>//常规命名
var templateUrl = &quot;&quot;;

//类、模块、命名空间命名
var PopWindow = (function() {
    //TODO
}());

//jQuery的dom对象命名
var $cameraList = jQuery(&quot;li.camera&quot;);

//私有性质（模块局部）的变量及函数命名
var _curController = null;

function _myPrivateFun() {
    //TODO
}
</code></pre><h3 id="属性相关"><a href="#属性相关" class="headerlink" title="属性相关"></a>属性相关</h3><p>属性主要分为三类：JS对象的属性，JSON对象的属性以及DOM对象的自定义属性；</p>
<ul>
<li><p>JS对象的属性命名应当遵从常规变量命名规范；</p>
<pre><code>//对象定义；（对象定义还可以这么写：var myObj = {}; ）
var myObj = new Object();
//对象属性命名
myObj.myAttribute = &quot;&quot;;
</code></pre></li>
<li><p>JSON对象属性命名应当遵从常规变量命名规范，并且在书写时应当以双引号限制，使用时以obj[“abc”]的方式引用；</p>
<pre><code>//json对象
var myJsonObj = {
    &quot;attrOne&quot;: &quot;first&quot;,   //第1个属性
    &quot;attrTwo&quot;: &quot;second&quot;,  //第2个属性
    &quot;attrThree&quot;: &quot;third&quot;  //第3个属性
};
</code></pre></li>
<li><p>DOM对象的自定义属性应当以“data-”前缀进行限制，启后的部分也应当遵从常规命名规范（尽量保持小写格式）；</p>
<pre><code>&lt;div class=&quot;row clearfix&quot;&gt;
    &lt;label&gt;框选资源：&lt;/label&gt;
    &lt;span class=&quot;map-draw&quot; data-event=&quot;click&quot; data-handler=&quot;MapSelect&quot;&gt;&lt;/span&gt;
&lt;/div&gt;
</code></pre></li>
</ul>
<h3 id="一些JS语法的写法"><a href="#一些JS语法的写法" class="headerlink" title="一些JS语法的写法"></a>一些JS语法的写法</h3><p>大部分JS语法不需要作特定规范，这里只规定一些需要注意或者回避的事项（<strong>加粗部分需要重点关注</strong>）：</p>
<ul>
<li>没有特殊理由，不应当使用标签语句；</li>
<li>没有特殊理由，不应当使用with语句；</li>
<li>没有特殊理由，不应当使用eval语句；</li>
<li>非必要情况下，避免使用++，- -等语法；、</li>
<li>非必要情况下，请勿使用Function方法构造函数；</li>
<li>非必要情况下，请勿传递字符串给setTimeout／setInterval方法； </li>
<li>非必要情况下，字符串应当使用双引号进行限制，单引号的使用应当局限于特殊场景； </li>
<li>continue语句尽量少用，应当避免在较大的代码块中使用，如实在需要使用，应当和块头距离在10行以内；</li>
<li><p>关于Switch语句，避免过度缩进；并且每个case都应当有自己的break/return/throw等结束语句，不建议共享结束语句；如需共享，应当使用空行和缩进，辅之以注释进行明显区分，例如：</p>
<pre><code>switch (type) {
    //business one
    case &quot;case&quot;:
    case &quot;case2&quot;:
        //TODO
        break;
        //business two
    case &quot;case3&quot;:
    case &quot;case4&quot;:
        //TODO
        break;
        //business three
    case &quot;case5&quot;:
        //TODO
        break;
    default:
        //TODO
};
</code></pre></li>
<li><p><strong>如无特殊理由，块末的分号禁止忽略不写；</strong></p>
</li>
<li><strong>逗号的写法应当严格按照语法，不可以多写或者少写；</strong></li>
<li>空格的使用一般情况下不做严格要求。除排版需要外，应当避免连续出现两个或更多空格；操作符，赋值号，逗号等前后应当各保留一个空格，保留字、函数名、括号后建议不保留空格；</li>
<li><strong>使用{}替代new Object()。使用[]替代new Array()；</strong></li>
<li>非方法级代码块不应当定义局部变量；</li>
<li>条件语句中不允许出现赋值代码；</li>
<li><strong>尽量使用===和!==，少使用==和!=；</strong></li>
<li><p>三目操作符应当适当使用，不要书写过长的三目操作符语句；问号和冒号间的的稍长的代码应当使用小括号包含起来并空出一个空格进行间隔，例如:</p>
<pre><code>//三目运算符
var curWidth = width &gt; 400 ? (maxWidth - halfWidth + marginLeft) : (halfWidth - marginRight)
</code></pre></li>
<li><p>条件语句如果内容过长时，应当考虑通过变量赋值的方式减少长度；如实在必要，可以考虑将布尔运算符联通后续的条件进行换行续写；例如:</p>
<pre><code>//条件内容比较长时，换行
 if(((maxWidth - halfWidth + marginLeft) &gt; 900 &amp;&amp; maxHeight &gt; 400)
    || ((maxWidth - halfWidth + marginLeft) &lt; 300 &amp;&amp; maxHeight &lt; 200))
 {
     //TODO
 }
</code></pre></li>
</ul>
<h2 id="代码结构规范"><a href="#代码结构规范" class="headerlink" title="代码结构规范"></a>代码结构规范</h2><h3 id="文件内代码结构"><a href="#文件内代码结构" class="headerlink" title="文件内代码结构"></a>文件内代码结构</h3><p>JS文件应当分为两部分书写：</p>
<ul>
<li>第一部分为文件主体注释，以块级注释方式描述文件内容，对接接口等内容。如非基础性或者常用库代码，可以省略。例如：</li>
</ul>
<p>Case1:<br><img src="image015.png" alt="代码结构"></p>
<p>Case2:<br> <img src="image016.png" alt="代码结构"></p>
<ul>
<li>第二部分为代码主体，应当以如下方式进行封装：</li>
</ul>
<p>Case1:函数表达式</p>
<pre><code>//无模块加载
(function() {

    //TODO, Module Body

}());

//依赖注入
(function(Module1,Module2, Module3) {

    //TODO, Module Body

}({}, module1, module2,...));
</code></pre><p>Case2:requireJS</p>
<pre><code>define([&quot;jquery&quot;, &quot;underscore&quot;], function($, _) {

    //TODO, Module Body

});
</code></pre><h3 id="模块／接口定义："><a href="#模块／接口定义：" class="headerlink" title="模块／接口定义："></a>模块／接口定义：</h3><ul>
<li><strong>IX框架</strong></li>
</ul>
<p>项目中跨文件进行调用的接口，模块，方法等应当使用命名空间进行限制。如使用IX框架，应当如下书写：</p>
<pre><code>IX.ns(&quot;IXW.Lib&quot;);

IXW.Lib.GridModel = function(id, cfg) {
    //TODO
};
</code></pre><ul>
<li><p><strong>requireJS</strong></p>
<pre><code>define([&quot;jquery&quot;, &quot;underscore&quot;], function($, _) {

    //局部变量（具有私有性质）
    var _myPrivateValue = &quot;&quot;;
    //局部函数及接口（具有私有性质）
     function _myPrivateFun() {
         //TODO
     }

    //对外接口
    return {
        //接口1
        interface1: function() {

        },
        //接口2
        interface2: function() {

        },
        //接口3（引用内部函数，对外暴漏）
        interface3: _myPrivateFun
    };
});
</code></pre></li>
<li><p><strong>其他情况应如下书写（或者使用各自框架提供的命名空间工具）：</strong></p>
<pre><code>window.ModuleA = {};

ModuleA.GridModel = function(id, cfg) {
    //TODO
};
</code></pre></li>
</ul>
<h3 id="使用外部模块／接口："><a href="#使用外部模块／接口：" class="headerlink" title="使用外部模块／接口："></a>使用外部模块／接口：</h3><p>项目中跨文件进行调用接口，模块，方法等，可以使用直接使用用完整命名空间的方式调用，也可以对命名空间定义快捷引用，然后使用快捷引用的方式使用；</p>
<p>样例如下：</p>
<pre><code>(function(Module1,Module2, Module3) {

    //全局的外部模块调用： case2
    var moduleX = new GlobalModule1();
    //全局的外部模块调用： case3
    var moduleY = new GlobalModule2.createObject();

}({}, module1, module2,...));
</code></pre><p><br></p>
<pre><code>//requireJS外部模块引入
define([&quot;jquery&quot;, &quot;underscore&quot;], function($, _) {

    //TODO: use $/_ do something

});
</code></pre><h3 id="函数或代码块约束："><a href="#函数或代码块约束：" class="headerlink" title="函数或代码块约束："></a>函数或代码块约束：</h3><ul>
<li>常规函数或代码块的长度应当控制在40行以内，<strong>代码结构不应当超过5层（最好在三层左右）缩进</strong>；如确实存在较大的控件，或控制中枢类的函数，其长度也应当控制在200行以内。</li>
<li>函数或代码块的长度和缩进控制，可以通过代码块分离，函数重构的方式进行处理。</li>
<li>JS文件的长度，如非基础性或者框架性文件，不应当超出500（加上注释）行，如因功能复杂导致代码过长，可以按照功能和结构拆分成多个子文件，通过接口方式调用；</li>
</ul>
<h2 id="文件组织规范"><a href="#文件组织规范" class="headerlink" title="文件组织规范"></a>文件组织规范</h2><h3 id="文件的组织应当以模块为单位，分散于各级子目录中。"><a href="#文件的组织应当以模块为单位，分散于各级子目录中。" class="headerlink" title="文件的组织应当以模块为单位，分散于各级子目录中。"></a>文件的组织应当以模块为单位，分散于各级子目录中。</h3><p>各级目录下文件控制在10（模块化拆分后最好控制在<strong>20</strong>个以内）个以内为宜，文件数如果太多会对代码阅读造成一定障碍，如果确实太多，一方面可以文件合并，另一方面可以拆分目录。</p>
<h3 id="代码文件的目录层级不宜过多，建议控制在5级以内"><a href="#代码文件的目录层级不宜过多，建议控制在5级以内" class="headerlink" title="代码文件的目录层级不宜过多，建议控制在5级以内"></a>代码文件的目录层级不宜过多，建议控制在5级以内</h3><p>一般如下：</p>
<pre><code>src／项目专用目录／子系统模块级目录／组件页面级目录／类接口级目录
</code></pre><h2 id="JS代码静态审查"><a href="#JS代码静态审查" class="headerlink" title="JS代码静态审查"></a>JS代码静态审查</h2><p>本文以<code>grunt-contrib-jshint</code>插件为例：</p>
<h3 id="Grunt安装"><a href="#Grunt安装" class="headerlink" title="Grunt安装"></a>Grunt安装</h3><p>Grunt安装之前需要在系统中安装NodeJs环境，然后将grunt配置中的文件拷贝到与工程根目录平行的目录下；</p>
<p><strong>具体安装过程参考</strong>：<a href="http://www.gruntjs.net/getting-started" target="_blank" rel="external">http://www.gruntjs.net/getting-started</a></p>
<h3 id="grunt-contrib-jshint安装及配置"><a href="#grunt-contrib-jshint安装及配置" class="headerlink" title="grunt-contrib-jshint安装及配置"></a>grunt-contrib-jshint安装及配置</h3><p>在nodejs及grunt环境安装完成的情况下：</p>
<ol>
<li>打开系统命令行窗口；</li>
<li>进入到与工程根目录平行的目录下；</li>
<li>执行<code>npm install grunt-contrib-jshint --save-dev</code>命令进行插件安装；</li>
<li>该插件的配置文件见jshint.config.json文件；</li>
<li><p>在gruntfile.js配置任务： </p>
<pre><code>module.exports = function(grunt) {
    // Project configuration.

    grunt.initConfig({
        pkg: grunt.file.readJSON(&quot;package.json&quot;),
        jshint: grunt.file.readJSON(&quot;jshint,config.json&quot;)
    });

    grunt.loadNpmTasks(&quot;grunt-contrib-jshint&quot;);

    //default task(s)
    grunt.registerTask(&quot;default&quot;, [&quot;jshint:history&quot;]);
    //静态审查任务
    grunt.registerTask(&quot;myTask&quot;, [&quot;jshint:history&quot;]);
}; 
</code></pre></li>
</ol>
<h3 id="执行静态审查"><a href="#执行静态审查" class="headerlink" title="执行静态审查"></a>执行静态审查</h3><ol>
<li>打开系统命令行窗口；</li>
<li>进入到与工程根目录平行的目录下；</li>
<li>执行grunt命令： <code>grunt myTask</code></li>
<li><p>审查结果如下：<br><img src="image027.png" alt="审查结果"> </p>
</li>
<li><p>对照着审查结果进行修改。</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;link href=&quot;http://cdn.bootcss.com/highlight.js/8.0/styles/monokai_sublime.min.css&quot; rel=&quot;stylesheet&quot;&gt;  &lt;/p&gt;
&lt;script src=&quot;http://cdn.bootcss.com/highlight.js/8.0/highlight.min.js&quot;&gt;&lt;/script&gt;  
&lt;script&gt;
    hljs.initHighlightingOnLoad();
&lt;/script&gt;   

&lt;h2 id=&quot;代码编写规范&quot;&gt;&lt;a href=&quot;#代码编写规范&quot; class=&quot;headerlink&quot; title=&quot;代码编写规范&quot;&gt;&lt;/a&gt;代码编写规范&lt;/h2&gt;&lt;h3 id=&quot;文件编码格式&quot;&gt;&lt;a href=&quot;#文件编码格式&quot; class=&quot;headerlink&quot; title=&quot;文件编码格式&quot;&gt;&lt;/a&gt;文件编码格式&lt;/h3&gt;&lt;p&gt;所有诸如JS，HTML，CSS等文本类型文件的编码格式必须使用UTF8方式。文件内的换行符统一使用UNIX风格或者Window风格，文件编辑过程中最好不要变更。&lt;/p&gt;
    
    </summary>
    
      <category term="代码" scheme="http://npxawebshare.github.io/categories/%E4%BB%A3%E7%A0%81/"/>
    
    
      <category term="JavaScript" scheme="http://npxawebshare.github.io/tags/JavaScript/"/>
    
      <category term="规范" scheme="http://npxawebshare.github.io/tags/%E8%A7%84%E8%8C%83/"/>
    
      <category term="前端" scheme="http://npxawebshare.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>五月份内部分享汇总-持续更新</title>
    <link href="http://npxawebshare.github.io/2016/05/06/share-May/"/>
    <id>http://npxawebshare.github.io/2016/05/06/share-May/</id>
    <published>2016-05-06T01:20:25.000Z</published>
    <updated>2016-08-03T07:49:07.946Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PVA-系统配置模块的业务"><a href="#PVA-系统配置模块的业务" class="headerlink" title="PVA 系统配置模块的业务"></a>PVA 系统配置模块的业务</h2><blockquote>
<p>2016/5/5-晚 大会议室<br>@方园<br> 相关资料： <a href="PVA系统配置-方园.pptx">PVA系统配置-PPT</a></p>
</blockquote>
<h2 id="PVA常用场景"><a href="#PVA常用场景" class="headerlink" title="PVA常用场景"></a>PVA常用场景</h2><blockquote>
<p>2016 大会议室<br>@吴德<br> 资料： <a href="PVA常用场景-吴德.pptx">PVA常用场景-PPT</a></p>
</blockquote>
<h2 id="PVA业务场景"><a href="#PVA业务场景" class="headerlink" title="PVA业务场景"></a>PVA业务场景</h2><blockquote>
<p>2016 大会议室<br>@王斌<br> 资料： <a href="PVA业务场景-王斌.pptx">PVA业务场景-PPT</a></p>
</blockquote>
<h2 id="PVA指挥调度业务"><a href="#PVA指挥调度业务" class="headerlink" title="PVA指挥调度业务"></a>PVA指挥调度业务</h2><blockquote>
<p>2016 大会议室<br>@宋江<br> 资料： <a href="PVA指挥调度业务-宋江.pptx">PVA指挥调度业务-PPT</a></p>
</blockquote>
<h2 id="视频指挥业务讲解"><a href="#视频指挥业务讲解" class="headerlink" title="视频指挥业务讲解"></a>视频指挥业务讲解</h2><blockquote>
<p>2016 大会议室<br>@陈梦晨<br> 资料： <a href="视频指挥业务讲解-陈梦晨.pptx">视频指挥业务讲解-PPT</a></p>
</blockquote>
<h2 id="视云实战产品演示"><a href="#视云实战产品演示" class="headerlink" title="视云实战产品演示"></a>视云实战产品演示</h2><blockquote>
<p>2016 大会议室<br>@金忠维<br> 资料： <a href="视云实战产品演示-金忠维.ppt">视云实战产品演示-PPT</a></p>
</blockquote>
<h2 id="图像研判模块讲解"><a href="#图像研判模块讲解" class="headerlink" title="图像研判模块讲解"></a>图像研判模块讲解</h2><blockquote>
<p>2016 大会议室<br>@张亮<br> 资料： <a href="图像研判模块讲解-张亮.pptx">图像研判模块讲解-PPT</a></p>
</blockquote>
<h2 id="运维管理模块讲解"><a href="#运维管理模块讲解" class="headerlink" title="运维管理模块讲解"></a>运维管理模块讲解</h2><blockquote>
<p>2016 大会议室<br>@田莹<br> 资料： <a href="业务讲解/运维管理模块讲解-田莹.pptx">运维管理模块讲解-PPT</a><br> <a href="业务讲解/视云实战平台pvaVersion0-3-6功能列表.xlsx">视云实战平台PVA功能列表-xls</a><br> <a href="业务讲解/运维.vsd">图例-vsd</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;PVA-系统配置模块的业务&quot;&gt;&lt;a href=&quot;#PVA-系统配置模块的业务&quot; class=&quot;headerlink&quot; title=&quot;PVA 系统配置模块的业务&quot;&gt;&lt;/a&gt;PVA 系统配置模块的业务&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;2016/5/5-晚 大会
    
    </summary>
    
      <category term="内部分享" scheme="http://npxawebshare.github.io/categories/%E5%86%85%E9%83%A8%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="分享" scheme="http://npxawebshare.github.io/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>下拉菜单插件(内部开发)代码和使用说明</title>
    <link href="http://npxawebshare.github.io/2016/05/05/select-plugin/"/>
    <id>http://npxawebshare.github.io/2016/05/05/select-plugin/</id>
    <published>2016-05-05T01:09:35.000Z</published>
    <updated>2016-08-03T07:49:14.472Z</updated>
    
    <content type="html"><![CDATA[<p><link href="http://cdn.bootcss.com/highlight.js/8.0/styles/monokai_sublime.min.css" rel="stylesheet">  </p>
<script src="http://cdn.bootcss.com/highlight.js/8.0/highlight.min.js"></script>  
<script>
    hljs.initHighlightingOnLoad();
</script>  

<blockquote>
<p>本插件代码路径:<a href="http://192.168.60.251/svn/xian-new/pva_project/trunk/src/module/common/select-box" target="_blank" rel="external">src\module\common\select-box\select.js &amp; select.html</a><br>@author songxj<br>@date 2015-10-16</p>
</blockquote>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre><code>define([&quot;ajaxModel&quot;, &quot;jquery&quot;, &apos;handlebars&apos;], function(ajaxModel, jQuery) {
    return (function (scope, $) {
        var
            _templateHtml = null, // 缓存模板列表
            _templateURL = &quot;/module/common/select-box/select.html&quot;, // 模版请求地址
</code></pre><h3 id="calculatePubdivPosition-计算下拉列表宽度和位置"><a href="#calculatePubdivPosition-计算下拉列表宽度和位置" class="headerlink" title="_calculatePubdivPosition 计算下拉列表宽度和位置"></a>_calculatePubdivPosition 计算下拉列表宽度和位置</h3><blockquote>
<p>计算下拉列表的宽度和位置,并给下拉列表容器元素添加相对应css属性<br>@param  {[type]} $selector [文本框元素]<br>@param  {[type]} $pubdiv   [下拉列表容器元素]</p>
</blockquote>
<pre><code>_calculatePubdivPosition = function ($selector, $pubdiv) {
    var selectorWidth = $selector.width(),
        selectorHeight = $selector.height(),
        offset = $selector.offset(),
        selectorLeft = offset.left,
        selectorTop = offset.top;
    $pubdiv.width(selectorWidth).css(&quot;left&quot;, selectorLeft).css(&quot;top&quot;, (selectorTop + selectorHeight)).show();
},
</code></pre><h3 id="dealCheckboxChooseStyle-处理下拉列表中checkbox选中样式"><a href="#dealCheckboxChooseStyle-处理下拉列表中checkbox选中样式" class="headerlink" title="_dealCheckboxChooseStyle 处理下拉列表中checkbox选中样式"></a>_dealCheckboxChooseStyle 处理下拉列表中checkbox选中样式</h3><blockquote>
<p>@param  {[type]} $this [下拉列表中checkbox行元素]</p>
</blockquote>
<pre><code>_dealCheckboxChooseStyle = function($this) {
    var $currentCheckbox = $this.find(&quot;i.checkbox&quot;),
        $allCheckboxs = $this.closest(&quot;.pubdiv&quot;).find(&quot;i.checkbox&quot;),
        isSelectedAllFlag = true,
        liType = $this.attr(&quot;data-value&quot;);

    // 实现checkbox全选、选中、取消选中
    if (liType === &quot;-1&quot;) { // 全选
        $currentCheckbox.hasClass(&quot;active&quot;) ? $allCheckboxs.removeClass(&quot;active&quot;) : $allCheckboxs.addClass(&quot;active&quot;);
    } else { // 非全选
        if ($currentCheckbox.hasClass(&quot;active&quot;)) { // 取消选中
            $currentCheckbox.removeClass(&quot;active&quot;);
            // 让全选不选中
            $allCheckboxs.first().removeClass(&quot;active&quot;);
        } else { // 选中
            $currentCheckbox.addClass(&quot;active&quot;);
            // 让全选选中
            $allCheckboxs.each(function() {
                if (!$this.hasClass(&quot;active&quot;) &amp;&amp; $this.closest(&quot;li&quot;).attr(&quot;data-value&quot;) !== &quot;-1&quot;) {
                    isSelectedAllFlag = false;
                    return false;
                }
            });
            if (isSelectedAllFlag) { // 让全选checkbox选中
                $allCheckboxs.first().addClass(&quot;active&quot;);
            }
        }
    }
},
</code></pre><h3 id="dealSelectListMuliSelect-处理下拉列表多选情况"><a href="#dealSelectListMuliSelect-处理下拉列表多选情况" class="headerlink" title="_dealSelectListMuliSelect 处理下拉列表多选情况"></a>_dealSelectListMuliSelect 处理下拉列表多选情况</h3><blockquote>
<p>@param  {[type]}   $this     [下拉列表中checkbox行元素]<br>@param  {[type]}   $selector [文本框元素]<br>@param  {Function} callback  [回调函数]</p>
</blockquote>
<pre><code>_dealSelectListMuliSelect = function($this, $selector, callback) {
    var $allCheckboxs = $this.closest(&quot;.pubdiv&quot;).find(&quot;i.checkbox&quot;),
        selectorClass = $selector.attr(&quot;class&quot;),
        mutiliCallbackData = {selector: selectorClass, data:[]};

    // 处理checkbox选中样式
    _dealCheckboxChooseStyle($this);

    // 拼凑callback返回的数据
    $allCheckboxs.each(function() {
        if ($(this).hasClass(&quot;active&quot;) &amp;&amp; $(this).closest(&quot;li&quot;).attr(&quot;data-value&quot;) !== &quot;-1&quot;) {
            mutiliCallbackData.data.push({name: $(this).siblings(&quot;em&quot;).text(), value: $(this).closest(&quot;li&quot;).attr(&quot;data-value&quot;)});
        }
    });

    // 执行回调函数
    callback &amp;&amp; callback(mutiliCallbackData);
},
</code></pre><h3 id="dealNormalSelectList-处理正常的下拉列表的情况"><a href="#dealNormalSelectList-处理正常的下拉列表的情况" class="headerlink" title="_dealNormalSelectList 处理正常的下拉列表的情况"></a>_dealNormalSelectList 处理正常的下拉列表的情况</h3><blockquote>
<p>@param  {[type]}   $this     [下拉列表行元素]<br>@param  {[type]}   $selector [文本框元素]<br>@param  {Function} callback  [回调函数]</p>
</blockquote>
<pre><code>_dealNormalSelectList = function($this, $selector, callback) {
    var $selectorField = $selector.find(&quot;.text&quot;),
        selectorClass = $selector.attr(&quot;class&quot;),
        liType = $this.attr(&quot;data-value&quot;),
        callbackData = {selector: selectorClass, data:{}},
        text = $this.text();

    // 将值写入下拉框,并删除下拉列表
    $selectorField.attr(&quot;data-value&quot;, liType).text(text);
    _switchArrow($this.closest(&quot;.pubdiv&quot;).siblings(&quot;.select_container&quot;));
    $this.closest(&quot;.pubdiv&quot;).remove();

    // 给callback返回的数据写值
    callbackData.data[&quot;name&quot;] = text;
    callbackData.data[&quot;value&quot;] = liType;

    // 执行回调函数
    callback &amp;&amp; callback(callbackData);
},
</code></pre><h3 id="bindSelectListEvent-下拉列表事件"><a href="#bindSelectListEvent-下拉列表事件" class="headerlink" title="_bindSelectListEvent 下拉列表事件"></a>_bindSelectListEvent 下拉列表事件</h3><blockquote>
<p>@author songxj<br>@param  {[type]}   $selector   [文本框元素]<br>@param  {[type]}   selectModle [下拉列表类型 multiSelect：多选  其他：非多选]<br>@param  {Function} callback    [回调函数]</p>
</blockquote>
<pre><code>_bindSelectListEvent = function ($selector, selectModle, callback) {
    /*下拉列表中下拉项的点击事件*/
    $(&quot;.select_wrapper .pubdiv li&quot;).on(&quot;click&quot;, function() {
        if (selectModle === &quot;multiSelect&quot;) { // 多选，肯定有回调函数
            // 处理下拉列表多选情况
            _dealSelectListMuliSelect($(this), $selector, callback);
        } else { // 非多选，有回调函数时执行回调函数
            // 处理正常的下拉列表的情况
            _dealNormalSelectList($(this), $selector, callback);
        }
    });

    /*下拉列表hover事件：标记当前鼠标是否离开下拉列表的状态*/
    $(&quot;.select_wrapper .pubdiv&quot;).hover(function() {
        $(this).removeClass(&quot;leave&quot;);
    }, function() {
        $(this).addClass(&quot;leave&quot;);
    });
},
</code></pre><h3 id="switchArrow-切换向上、向下箭头"><a href="#switchArrow-切换向上、向下箭头" class="headerlink" title="_switchArrow 切换向上、向下箭头"></a>_switchArrow 切换向上、向下箭头</h3><blockquote>
<p>@param  {[type]} $selector [文本框元素]</p>
</blockquote>
<pre><code>_switchArrow = function ($selector) {
    var $pubdiv = $selector.siblings(&quot;.pubdiv&quot;),
        $arrow = $selector.find(&quot;.arrow&quot;);

    $pubdiv.is(&quot;:visible&quot;) ? $arrow.addClass(&quot;arrow-down&quot;).removeClass(&quot;arrow-up&quot;) : $arrow.addClass(&quot;arrow-up&quot;).removeClass(&quot;arrow-down&quot;);
},
</code></pre><h3 id="drawTemplateCallback-渲染模板的回调函数"><a href="#drawTemplateCallback-渲染模板的回调函数" class="headerlink" title="_drawTemplateCallback 渲染模板的回调函数"></a>_drawTemplateCallback 渲染模板的回调函数</h3><blockquote>
<p>@param  {[type]} $selector [文本框元素]<br>@param  {[type]} params    [参数列表]</p>
</blockquote>
<pre><code>_drawTemplateCallback = function ($selector, params) {
    var $selectWrapper = $selector.closest(&quot;.select_wrapper&quot;),
        tempData = {};

    tempData[params.selectModle] = {&quot;data&quot;: params.data};
    $selectWrapper.append(_templateHtml(tempData));

    // 给下拉列表做个标记：当前的下拉框
    $selectWrapper.find(&quot;.pubdiv&quot;).attr(&quot;data-selector&quot;, params.selector);

    // 计算下拉列表的宽度和位置
    _calculatePubdivPosition($selector, $selectWrapper.find(&quot;.pubdiv&quot;));

    // 绑定下拉列表事件
    _bindSelectListEvent($selector, params.selectModle, params.callback);
},
</code></pre><h3 id="getSelectorData-获取下拉列表数据"><a href="#getSelectorData-获取下拉列表数据" class="headerlink" title="_getSelectorData 获取下拉列表数据"></a>_getSelectorData 获取下拉列表数据</h3><blockquote>
<p>@param  {[type]} $selector [文本框元素]<br>@param  {[type]} params    [参数列表]</p>
</blockquote>
<pre><code>_getSelectorData = function ($selector, params) {
    var selectModle = null;

    // 判断当前下拉框的模板类型
    if (!params.isMultiSelect) { // 不是多选下拉列表
        selectModle = &quot;normal&quot;;
    } else { // 多选下拉列表
        selectModle = &quot;multiSelect&quot;;
    }
    params[&quot;selectModle&quot;] = selectModle;

    // 若模板不存在则重新发送请求加载，若存在则根据模板加载数据并显示
    if (_templateHtml) {
        _drawTemplateCallback($selector, params);
    } else {
        ajaxModel.getTml(_templateURL).then(function(result) {
            _templateHtml = Handlebars.compile(result); //缓存模板
            _drawTemplateCallback($selector, params);
        });
    }
},
</code></pre><h3 id="bindEvents-下拉文本框元素、document事件"><a href="#bindEvents-下拉文本框元素、document事件" class="headerlink" title="_bindEvents 下拉文本框元素、document事件"></a>_bindEvents 下拉文本框元素、document事件</h3><blockquote>
<p>@param  {[type]} params [参数列表]</p>
</blockquote>
<pre><code>_bindEvents = function (params) {
    /*下拉文本框元素点击事件：显示加载下拉列表*/
    $(params.selector).on(&quot;click&quot;, function(e) {
        var $this = $(this),
            $selectWrapper = $this.closest(&quot;.select_wrapper&quot;),
            $panel = $(&quot;.select_wrapper .pubdiv&quot;);

        // 阻止事件冒泡
        e.stopPropagation();

        // 若界面上有下拉列表，则删除
        if ($panel.length) {
            _switchArrow($(&quot;.select_wrapper .pubdiv&quot;).closest(&quot;.select_wrapper&quot;).find(&quot;.select_container&quot;));
            $(&quot;.select_wrapper .pubdiv&quot;).remove();

            // 若点击的是当前下拉框,return
            if ($panel.attr(&quot;data-selector&quot;) === params.selector) {
                return;
            }
        }

        // 切换当前下拉元素的箭头
        _switchArrow($this);

        // 获取对应下拉列表数据
        _getSelectorData($this, params);
    });

    /*document点击事件：点击非下拉列表时，将当前下拉列表删除*/
    if (!this.inited) {
        $(document).on(&quot;click&quot;, function(e) {
            if ($(&quot;.select_wrapper .pubdiv&quot;).hasClass(&quot;leave&quot;)) {
                _switchArrow($(&quot;.select_wrapper .pubdiv&quot;).closest(&quot;.select_wrapper&quot;).find(&quot;.select_container&quot;));
                $(&quot;.select_wrapper .pubdiv&quot;).remove();
            }
        });
        this.inited = true;
    }
};
</code></pre><h3 id="selectBox-下拉列表入口"><a href="#selectBox-下拉列表入口" class="headerlink" title="selectBox 下拉列表入口]"></a>selectBox 下拉列表入口]</h3><blockquote>
<p>@param  {[type]} options [参数列表]</p>
</blockquote>
<pre><code>scope.selectBox = function (options) {
   if (options instanceof Array) { // 数组：多个下拉框
        for (var i = 0, optionLength = options.length; i &lt; optionLength; i++) {
            _bindEvents(options[i]);
        }
   } else { // 对象：一个下拉框
        _bindEvents(options);
   }
};
</code></pre><blockquote>
<p>return scope</p>
</blockquote>
<pre><code>        return scope;
    }({}, jQuery));
});
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;link href=&quot;http://cdn.bootcss.com/highlight.js/8.0/styles/monokai_sublime.min.css&quot; rel=&quot;stylesheet&quot;&gt;  &lt;/p&gt;
&lt;script src=&quot;http://cdn.bootc
    
    </summary>
    
      <category term="categories1" scheme="http://npxawebshare.github.io/categories/categories1/"/>
    
      <category term="categories2" scheme="http://npxawebshare.github.io/categories/categories1/categories2/"/>
    
    
      <category term="插件" scheme="http://npxawebshare.github.io/tags/%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>开始在 hexo 上书写文章</title>
    <link href="http://npxawebshare.github.io/2016/04/27/hexo-config/"/>
    <id>http://npxawebshare.github.io/2016/04/27/hexo-config/</id>
    <published>2016-04-27T07:56:02.000Z</published>
    <updated>2016-08-03T07:49:14.465Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="其他软件的4000端口占用问题"><a href="#其他软件的4000端口占用问题" class="headerlink" title="其他软件的4000端口占用问题"></a>其他软件的4000端口占用问题</h3><blockquote>
<p>hexo 有默认的端口号4000 一般不用修改，但是有时候跟系统端口号有冲突（目前发现的冲突软件就福昕阅读器一个，最好卸了），这就需要解决下：</p>
</blockquote>
<pre><code>查看指定端口的进程
netstat -ano|findstr 4000

以进程编号查找程序
tasklist|findstr 1640

查看所有进程
netstat -n|-a

结束冲突的进程 启动你的hexo服务即可
</code></pre><h3 id="hexo-中创建md文件"><a href="#hexo-中创建md文件" class="headerlink" title="hexo 中创建md文件"></a>hexo 中创建md文件</h3><p>命令行中输入（不需要后缀名）：</p>
<pre><code>$ hexo new &quot;new article&quot;
</code></pre><p>之后在source/_posts目录下面，多了一个new-article.md的文件。</p>
<p>打开之后我们会看到：</p>
<pre><code>=========================

title: new article 

date: 2016-04-25 11:10:33 

tags: 

=========================
</code></pre><p>文件的开头是属性，采用统一的<code>yaml</code>格式，用三条短横线分隔。下面是文章正文。</p>
<p>文章的正文支持markdown格式</p>
<p>新建、删除或修改文章后，不需要重启hexo server，刷新一下即可预览。</p>
<p><strong>文章可以拥有如下属性</strong>：</p>
<pre><code>Setting Description Default

layout    Layout    post或page    

title    文章的标题    

date    创建日期    文件的创建日期    

updated    修改日期    文件的修改日期    

comments    是否开启评论    true    

tags    标签    

categories    分类    

permalink    url中的名字    文件名    
</code></pre><p>动态博客中通过发布文章页面设置的各种属性，在hexo里要这样设置。</p>
<p><strong>分类和标签</strong></p>
<p>例如：</p>
<pre><code>===========

categories: 

- 日记 

tags: 

- Hexo 

- node.js

===========
</code></pre><p><strong>摘要</strong><br>同wordpress一样，<code>&lt;!--more--&gt;</code>之上的内容为摘要。</p>
<p><strong>layout</strong><br>如果你修改了layout，在scaffolds文件夹里一定要有名字对应的模版文件，否则会采用默认模版。</p>
<p><strong>文件名</strong><br>在配置文件中的<code>new_post_name</code>项可以设置文件名，默认为:title，也就是你在命令行输入的名字。</p>
<p>文件名可以为下面几个变量和字符串常量的任意组合：</p>
<pre><code>Variable Description

:title    Escaped title (lower case and replace spaces with dash)    

:year    Created year (4-digit)    

:month    Created month (2-digit)    

:i_month    Created month (Without leading zeros)    

:day    Created day (2-digit)    

:i_day    Created day (Without leading zeros)    
</code></pre><p>草稿<br>草稿相当于很多博客都有的“私密文章”功能。</p>
<pre><code>$ hexo new draft &quot;new draft&quot;
</code></pre><p>会在source/_drafts目录下生成一个new-draft.md文件。但是这个文件不被显示在页面上，链接也访问不到。也就是说如果你想把某一篇文章移除显示，又不舍得删除，可以把它移动到_drafts目录之中。</p>
<p>如果你希望强行预览草稿，更改配置文件：</p>
<pre><code>render_drafts: true
</code></pre><p>或者，如下方式启动server：</p>
<pre><code>$ hexo server --drafts
</code></pre><p>下面这条命令可以把草稿变成文章，或者页面：</p>
<pre><code>$ hexo publish [layout] &lt;filename&gt;
</code></pre><hr>
<h3 id="hexo命令大全"><a href="#hexo命令大全" class="headerlink" title="hexo命令大全"></a>hexo命令大全</h3><pre><code>$ hexo help
Usage: hexo &lt;command&gt;

Commands:
  clean     Removed generated files and cache.
  config    Get or set configurations.
  deploy    Deploy your website.
  generate  Generate static files.
  help      Get help on a command.
  init      Create a new Hexo folder.
  list      List the information of the site
  migrate   Migrate your site from other system to Hexo.
  new       Create a new post.
  publish   Moves a draft post from _drafts to _posts folder.
  render    Render files with renderer plugins.
  server    Start the server.
  version   Display version information.

Global Options:
  --config  Specify config file instead of using _config.yml
  --cwd     Specify the CWD
  --debug   Display all verbose messages in the terminal
  --draft   Display draft posts
  --safe    Disable all plugins and scripts
  --silent  Hide output on console

For more help, you can use &apos;hexo help [command]&apos; for the detailed information
or you can check the docs: http://hexo.io/docs/
</code></pre><h2 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h2><p>目前的办法是：在你的md文件主题内容前加上代码段，引入highlight插件帮助高亮显示（联网）</p>
<pre><code>&lt;link href=&quot;http://cdn.bootcss.com/highlight.js/8.0/styles/monokai_sublime.min.css&quot; rel=&quot;stylesheet&quot;&gt;  
&lt;script src=&quot;http://cdn.bootcss.com/highlight.js/8.0/highlight.min.js&quot;&gt;&lt;/script&gt;  
&lt;script&gt;
    hljs.initHighlightingOnLoad();
&lt;/script&gt; 
</code></pre><h2 id="主题"><a href="#主题" class="headerlink" title="主题　"></a>主题　</h2><blockquote>
<p><a href="http://www.jianshu.com/p/db7e64d86067" target="_blank" rel="external">参考</a></p>
</blockquote>
<h3 id="主题库"><a href="#主题库" class="headerlink" title="主题库"></a>主题库</h3><ul>
<li><a href="https://github.com/hexojs/hexo/wiki/themes" target="_blank" rel="external">wiki</a></li>
<li><a href="https://hexo.io/themes/" target="_blank" rel="external">Hexo官方主题</a></li>
</ul>
<h3 id="安装命令"><a href="#安装命令" class="headerlink" title="安装命令"></a>安装命令</h3><pre><code>$ git clone &lt;repository&gt; themes/&lt;theme-name&gt;
比如：$ git clone https://github.com/wuchong/jacman.git themes/jacman
</code></pre><p>然后就可以在hexo/theme下看到下载的主题文件夹</p>
<p>###　启用主题</p>
<p>修改主目录下配置文件<code>_config.yml</code>中的theme设置项，将其值设置为你下载的主题名称</p>
<h2 id="文章中本地图片的配置"><a href="#文章中本地图片的配置" class="headerlink" title="文章中本地图片的配置"></a>文章中本地图片的配置</h2><ol>
<li>在主目录配置文件中找到<code>post_asset_folder</code>配置项，其值改为<code>true</code>。</li>
<li>编写md文件时，需要的文件放在文件同目录下的同名文件夹下，比如<code>_posts</code>文件夹下<code>hello.md</code>使用的图片全部放在<code>_posts</code>文件夹下新建的<code>hello</code>文件夹(<code>hexo new &quot;hello&quot;</code>命令之后会自动创建hello文件夹)下。</li>
<li>md书写直接时用<code>![图片说明](图片名称)</code>即可，不用写图片路径。</li>
<li>其他资源使用方法类似</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
      <category term="教程" scheme="http://npxawebshare.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
      <category term="hexo" scheme="http://npxawebshare.github.io/categories/%E6%95%99%E7%A8%8B/hexo/"/>
    
    
      <category term="hexo" scheme="http://npxawebshare.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>实习总结-JavaScript hy-002篇</title>
    <link href="http://npxawebshare.github.io/2016/04/26/exp-haoyong-002/"/>
    <id>http://npxawebshare.github.io/2016/04/26/exp-haoyong-002/</id>
    <published>2016-04-26T10:49:15.000Z</published>
    <updated>2016-08-03T07:49:14.448Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>JavaScript</li>
<li>ajax</li>
<li>实习学习总结</li>
<li>类型转换</li>
<li>json</li>
<li>事件</li>
<li>ajax</li>
<li>函数</li>
</ul>
<h3 id="类型转换："><a href="#类型转换：" class="headerlink" title="类型转换："></a>类型转换：</h3><ul>
<li>布尔值，数字以及字符串和所有对象都有<code>toString([bin])</code>方法</li>
<li><code>String(v)</code>  （v=null或undefined）值强制类型转换可以生成字符串而不引发错误,<code>toString()</code>会引发错误,也就是说null unfined 没有toString方法</li>
<li><code>parseInt(str,[bin])</code>第二个参数指定按哪一种进制来解析；</li>
<li><code>parseFloat(str)</code> 只有String类型调用这些parse方法，否则（Number除外）返回NaN</li>
<li>强制类型转换： <code>Boolean(v)</code> 空字符串、数字0、undefined或null,它将返回false,其余返回true；<code>Number(v)</code>强制转成数值型 该方法比<code>parseInt()</code>和<code>parseFloat()</code>要严格 遇到非法字符串会返回NaN 若合法 则智能调用<code>parseInt()</code>或<code>parseFloat()</code></li>
</ul>
<h3 id="json"><a href="#json" class="headerlink" title="json"></a>json</h3><ul>
<li>引入json2.0.js：JSON.stringify(json) 将JSON对象转化为JSON字符</li>
<li>jquery对象的方法$.parseJSON(); 由JSON字符串转换为JSON对象 </li>
</ul>
<h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><ul>
<li>直接在dom对象上注册事件名称-DOM0写法,事件名称也可以用[‘’]方式(相同的注册事件 后面的会覆盖前面的)</li>
<li>事件的注册还可以直接写在标签里(这种方式好像获取不到当前上下文this以及事件对象e参数在函数体内使用会有问题，不建议用于复杂的事件)；</li>
<li>事件触发时，会默认传入一个参数e（event对象），表示事件对象，通过e的属性（<code>keyCode，clientX，screenX，shiftKey</code>），可以获取很多有用的信息；</li>
<li>事件触发时，this就是指该事件在哪个dom对象上触发；</li>
<li>事件的三阶段（<code>捕获 目标 冒泡</code>）：某个元素触发了某个事件，最先得到通知的是window，然后是document，依次而入，直到真正触发事件的那个元素(目标元素)为止，这个过程就是捕获。接下来，事件就到了目标，然后再从元素开始起泡，再依次而出，直到window对象为止，这个过程就是冒泡。</li>
<li>注册事件（<code>addEventListener，attachEvent</code>）默认使用的是冒泡阶段（ie不支持捕获触发）；</li>
<li>解除该注册事件：<code>btn.已经注册事件名称 = null;</code></li>
<li>不同dom元素（嵌套关系）注册同时期(true,捕获)的同触发事件：先触发外面的元素，在触发内部的；若是都在冒泡时期触发则反之（不同级元素定义不同时期事件，理清捕获冒泡顺序和元素嵌套即可分清触发时期）</li>
</ul>
<h3 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h3><p><strong>步骤</strong></p>
<ol>
<li>创建一个异步对象</li>
<li>打开open(“get/post”, url, true);   //1.发送请求的方式 2.样请求的页面 3.是否异步</li>
<li>发送send()；</li>
</ol>
<p><strong>http请求状态码readyState</strong></p>
<pre><code>0：未初始化。对象已经创建，但还未初始化，即还没调用open方法；
1：已打开。对象已经创建并初始化，但还未调用send方法；
2：已发送。已经调用send 方法，但该对象正在等待状态码和头的返回；
3：正在接收。已经接收了部分数据，但还不能使用该对象的属性和方法，因为状态和响应头不完整；
4：已加载。所有数据接收完毕
</code></pre><p><strong>HTTP请求的返回值status（服务器返回报文的状态码）</strong></p>
<pre><code>2xx     成功（200）
3xx     重定向
4xx     客户机中出现的错误
5xx     服务器中出现的错误
</code></pre><p><strong>jQuery中的一些异步方法</strong></p>
<pre><code>load(url,[data],[callback]) 载入远程HTML文件
Query.get(url, [data], [callback])  使用get方式从服务器端获取数据
jQuery.getJSON(url,[data],[callback]) 通过get方式获取json格式的数据
jQuery.ajax({...}) 有众多的参数，适合比较复杂的异步操作
</code></pre><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p> 匿名函数是没有函数名 后面带有括号 直接执行的函数，可以带参数，也可以链式调用(类似jQuery的链式调用，总要有个返回值-返回自身的上下文)；</p>
<p> 回调函数：事先规定好执行完一些语句或函数之后再去执行特定的函数（回调函数），能很好的实现异步，回调函数是作为另一个函数的参数调用的。</p>
<blockquote>
<p>到一个商店买东西，刚好你要的东西没有货，于是你在店员那里留下了你的电话，过了几天店里有货了，店员就打了你的电话，然后你接到电话后就到店里去取了货。在这个例子里，你的电话号码就叫回调函数，你把电话留给店员就叫登记回调函数，店里后来有货了叫做触发了回调关联的事件，店员给你打电话叫做调用回调函数，你到店里去取货叫做响应<strong>回调事件</strong>（from 知乎）</p>
</blockquote>
<p>函数表达式：分为具名函数表达式和匿名函数表达式  具名函数表达式是一种赋值表达式 会先创建object对象 在创建function对象</p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;li&gt;ajax&lt;/li&gt;
&lt;li&gt;实习学习总结&lt;/li&gt;
&lt;li&gt;类型转换&lt;/li&gt;
&lt;li&gt;json&lt;/li&gt;
&lt;li&gt;事件&lt;/li&gt;
&lt;li&gt;ajax&lt;/li&gt;
&lt;li&gt;函数&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;类型转换：
    
    </summary>
    
    
      <category term="tag1" scheme="http://npxawebshare.github.io/tags/tag1/"/>
    
      <category term="tag2" scheme="http://npxawebshare.github.io/tags/tag2/"/>
    
      <category term="tag3" scheme="http://npxawebshare.github.io/tags/tag3/"/>
    
  </entry>
  
  <entry>
    <title>实习总结-JavaScript hy-001篇</title>
    <link href="http://npxawebshare.github.io/2016/04/26/exp-haoyong-001/"/>
    <id>http://npxawebshare.github.io/2016/04/26/exp-haoyong-001/</id>
    <published>2016-04-26T10:45:55.000Z</published>
    <updated>2016-08-03T07:49:14.447Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JavaScript原生ajax原理，发送一个异步请求的主要步骤是："><a href="#JavaScript原生ajax原理，发送一个异步请求的主要步骤是：" class="headerlink" title="JavaScript原生ajax原理，发送一个异步请求的主要步骤是："></a>JavaScript原生ajax原理，发送一个异步请求的主要步骤是：</h3><ol>
<li>创建XMLHttpRequest或ActionXObject(IE浏览器)实例xhr；</li>
<li>设置xhr的属性onreadystatechange触发的函数，一般要在函数内部判断xhr的readyState属性值，在等于4的时候表示请求正常返回，可以接收和处理xhr的返回值responseText或responseXML；</li>
<li>创建主函数，用包装发送请求，调用步骤2的触发函数，做出响应。</li>
</ol>
<h3 id="字符串的使用："><a href="#字符串的使用：" class="headerlink" title="字符串的使用："></a>字符串的使用：</h3><ol>
<li>两种不同初始化字符串的区别，<code>String(s)</code>, <code>new String(s)</code>，前者创建变量类型是string，后者是object；</li>
<li>基本字符获取类的函数：<code>charAt(index)</code> 返回字符串string的第n个字符、<code>charCodeAt(index)</code> 返回第n个字符的Unicode编码、<code>ndexOf(substring[,start])</code>在string中的start位置之后存在substring返回出现的第一个substring 的位置、以及<code>lastIndexOf()</code>的使用方法；</li>
<li>字符抽取类的几个函数演示：<code>substring(from[, to = end])</code> –返回一个新字符串，包含的字符是从string中的from处到to-1处复制的、<code>substr(from, to)</code>、<code>slice(start, end)</code>返回包括字符串从start开始(包括start)到end为止(不包 括end)的所有字符、<code>split(&quot;?&quot;)</code> 返回截取字符串段的数组、<code>concat(s)</code>连接字符串 一般使用 “+”</li>
<li><code>replace(regexp, replacement)</code> 替换匹配的第一个、<code>match(reg)</code>返回匹配结果的数组</li>
</ol>
<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><ol>
<li>学习，大部分函数类似string的函数，分清其<code>pop push shift unshift</code>；<code>splice</code>会改变原数组元素，<code>slice</code>不会改变原数组；借助<code>sort</code>函数自定义排序</li>
<li>函数对象Function的了解，主要是apply和call的使用，他们可以重新定义函数的上下文，了解argument的基本用法;</li>
<li>Json的基本格式 会遍历<code>json</code>，<code>eval(&quot;(&quot; + jsonstr +&quot;)&quot;)</code>可以把json字符串转换为json对象eval加括号将括号内的表达式（expression）转化为对象，而不是作为语句来执行。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;JavaScript原生ajax原理，发送一个异步请求的主要步骤是：&quot;&gt;&lt;a href=&quot;#JavaScript原生ajax原理，发送一个异步请求的主要步骤是：&quot; class=&quot;headerlink&quot; title=&quot;JavaScript原生ajax原理，发送一个异
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://npxawebshare.github.io/tags/JavaScript/"/>
    
      <category term="ajax" scheme="http://npxawebshare.github.io/tags/ajax/"/>
    
      <category term="实习学习总结" scheme="http://npxawebshare.github.io/tags/%E5%AE%9E%E4%B9%A0%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>markdown grammar</title>
    <link href="http://npxawebshare.github.io/2016/04/26/markdown-grammar/"/>
    <id>http://npxawebshare.github.io/2016/04/26/markdown-grammar/</id>
    <published>2016-04-26T08:57:31.000Z</published>
    <updated>2016-08-03T07:49:14.464Z</updated>
    
    <content type="html"><![CDATA[<p>markdown：让书写更美好<br><img src="http://i.imgur.com/JEHBuiE.png" alt="美丽的markdown"></p>
<h1 id="md和html的相互兼容"><a href="#md和html的相互兼容" class="headerlink" title="md和html的相互兼容"></a>md和html的相互兼容</h1><p>在HTML<strong>区块标签</strong>间的Markdown格式语法将不会被处理。比如，你在HTML区块内使用Markdown样式的<em>强调</em>没有效果。</p>
<pre><code>没有效果的强调
&lt;div&gt;
    123
    **没有强调**
&lt;/div&gt;
</code></pre><p>但是Markdown 语法在 HTML <strong>区段标签</strong>间是有效的</p>
<pre><code>有效果的强调
&lt;span&gt;
    AT&amp;T
    **强调**
&lt;/span&gt;
</code></pre><h3 id="引用Blockquotes"><a href="#引用Blockquotes" class="headerlink" title="引用Blockquotes"></a>引用Blockquotes</h3><blockquote>
<p>This is the first level of quoting.</p>
<blockquote>
<p>This is nested blockquote.</p>
</blockquote>
<ol>
<li>Back to the first level.</li>
<li><strong>1231</strong></li>
</ol>
</blockquote>
<p><strong>清除意外列表</strong></p>
<ol>
<li>What a great season.</li>
</ol>
<p>1986. What a great season.</p>
<p><strong>如果列表项目间用空行分开，在输出 HTML 时 Markdown 就会将项目内容用<code>&lt;p&gt;</code> 标签包起来</strong></p>
<p>分割线</p>
<h2 id=""><a href="#" class="headerlink" title="*"></a><em>*</em></h2><hr>
<p>###　连接</p>
<p><a href="http://example.com/" title="Optional Title Here" target="_blank" rel="external">foo</a>: <a href="http://example.com/" target="_blank" rel="external">http://example.com/</a>  ‘Optional Title Here’</p>
<p>See my <a href="/about/">About</a> page for details.</p>
<p>This is <a href="localhost" title="顶部">an example</a> reference-style link.</p>
<h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p><img src="image.png" alt="这是alt" title="这是title"></p>
<p><br><br><br><br><br><br><br><br><br><br><br></p>
<h1 id="3434"><a href="#3434" class="headerlink" title="### 3434"></a>### 3434</h1><ul>
<li>-</li>
<li>-</li>
<li>-<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3></li>
</ul>
<div><br>    123<br>    <strong>qweqw</strong><br></div>

]]></content>
    
    <summary type="html">
    
      &lt;p&gt;markdown：让书写更美好&lt;br&gt;&lt;img src=&quot;http://i.imgur.com/JEHBuiE.png&quot; alt=&quot;美丽的markdown&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;md和html的相互兼容&quot;&gt;&lt;a href=&quot;#md和html的相互兼容&quot; class=&quot;
    
    </summary>
    
    
      <category term="语法" scheme="http://npxawebshare.github.io/tags/%E8%AF%AD%E6%B3%95/"/>
    
      <category term="markdown" scheme="http://npxawebshare.github.io/tags/markdown/"/>
    
      <category term="md" scheme="http://npxawebshare.github.io/tags/md/"/>
    
  </entry>
  
</feed>
